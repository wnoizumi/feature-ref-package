{
  "executionId" : "0aff535a-65d9-48d5-bfd9-0528e32ebd75",
  "computingTime" : 12371,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.216355441081779,
    "meanNumConcerns" : 1.7593615715162678,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "c8462463-b52a-43d7-89ec-adb55e1fc4fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784069,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 8.143409501880395,
    "generation" : 0,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784069,
      "Density" : 3.2057692307692314,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd58353d-b904-42e7-a580-8667d6cc1a13",
    "objectives" : {
      "NumberOfConcerns" : 1.0055826936496859,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5463241534766257,
      "MetricsIntensity" : 0.06079719659262547,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 10.115026612621133,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7583892617449663,
      "LackOfCohesion" : 0.5463241534766257,
      "MetricsIntensity" : 0.06079719659262546,
      "Density" : 3.200512491992312,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5359a8ec-3851-4535-a8f5-f8987952b2ef",
    "objectives" : {
      "NumberOfConcerns" : 1.0059316120027912,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5455640110042079,
      "MetricsIntensity" : 0.060798788015637546,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 10.11504008651844,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7589993898718732,
      "LackOfCohesion" : 0.5455640110042079,
      "MetricsIntensity" : 0.060798788015637546,
      "Density" : 3.1991037131882205,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c5ab43a-4a14-4846-8c27-d1c05f7d6472",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5407836230932695,
      "MetricsIntensity" : 0.06107794090149189,
      "Density" : 1.0042042042042043
    },
    "euclideanDistance" : 14.082091516676856,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.759975445058318,
      "LackOfCohesion" : 0.5407836230932695,
      "MetricsIntensity" : 0.06107794090149189,
      "Density" : 3.2298776561493887,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    } ]
  }, {
    "solutionId" : "80a88575-c3c5-40dc-bfb7-fdfe69ed2ae3",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.545618440400917,
      "MetricsIntensity" : 0.06089146831583515,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 19.06062950572207,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756872327428222,
      "LackOfCohesion" : 0.545618440400917,
      "MetricsIntensity" : 0.060891468315835154,
      "Density" : 3.2006410256410254,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bddd5004-6cb9-4b97-8608-9b5074f7492b",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5436123800825536,
      "MetricsIntensity" : 0.06077122538176583,
      "Density" : 1.0
    },
    "euclideanDistance" : 19.060629557630733,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7591687041564787,
      "LackOfCohesion" : 0.5436123800825536,
      "MetricsIntensity" : 0.06077122538176584,
      "Density" : 3.2039769082745355,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "79ed00b2-4082-4962-8e41-7ed013023700",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5469803308187825,
      "MetricsIntensity" : 0.06082325746518469,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 19.060968205580668,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7591687041564787,
      "LackOfCohesion" : 0.5469803308187825,
      "MetricsIntensity" : 0.06082325746518469,
      "Density" : 3.2166666666666655,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "43a8310b-a3eb-49ee-b7dc-34e4ac495797",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5503666163008465,
      "MetricsIntensity" : 0.06092498857733279,
      "Density" : 0.9985985985985986
    },
    "euclideanDistance" : 23.050149780705578,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7556505803298716,
      "LackOfCohesion" : 0.5503666163008465,
      "MetricsIntensity" : 0.060924988577332785,
      "Density" : 3.1994868505452216,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "23d5de57-0a7b-4a40-8445-4d48477d86c1",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5480818513526701,
      "MetricsIntensity" : 0.06082355049127588,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 26.044344551619353,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7568723274282219,
      "LackOfCohesion" : 0.5480818513526701,
      "MetricsIntensity" : 0.060823550491275885,
      "Density" : 3.1988454137267475,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.AbstractServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "8a17c468-2e8d-4801-86ce-51339d4734ca",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5486461952456791,
      "MetricsIntensity" : 0.060839046021381384,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 26.044450623385902,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.757334963325183,
      "LackOfCohesion" : 0.5486461952456791,
      "MetricsIntensity" : 0.060839046021381384,
      "Density" : 3.207825529185375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8d0602c3-4bc5-4d15-8b86-743b1ee276b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5478050054647339,
      "MetricsIntensity" : 0.060829737713159325,
      "Density" : 0.997997997997998
    },
    "euclideanDistance" : 28.041099885919987,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7559633027522938,
      "LackOfCohesion" : 0.5478050054647339,
      "MetricsIntensity" : 0.06082973771315932,
      "Density" : 3.199614890885751,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "12b47a76-5bd5-49ae-95a3-dcb9410d3fa6",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5498497256495078,
      "MetricsIntensity" : 0.060986996990405946,
      "Density" : 1.0008008008008007
    },
    "euclideanDistance" : 29.0398561784102,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7577981651376144,
      "LackOfCohesion" : 0.5498497256495078,
      "MetricsIntensity" : 0.06098699699040594,
      "Density" : 3.206542655548428,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "e8c8bd06-9066-441c-aa5c-56dfd600d263",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5426478639517522,
      "MetricsIntensity" : 0.060830760266270524,
      "Density" : 0.9967967967967968
    },
    "euclideanDistance" : 30.038276603882778,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7594859241126068,
      "LackOfCohesion" : 0.5426478639517522,
      "MetricsIntensity" : 0.06083076026627052,
      "Density" : 3.1978163134232505,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a9015dde-5b22-46a1-85a3-921e68e38780",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5441062572144953,
      "MetricsIntensity" : 0.060816535150681486,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 30.03842774267708,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7579462102689491,
      "LackOfCohesion" : 0.5441062572144953,
      "MetricsIntensity" : 0.060816535150681486,
      "Density" : 3.204618345093007,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "79df1206-6ff0-44d8-a6ad-2eb16f2ed7d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5482191279740904,
      "MetricsIntensity" : 0.06090975840950456,
      "Density" : 0.9977977977977978
    },
    "euclideanDistance" : 31.037139785412865,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7576499388004894,
      "LackOfCohesion" : 0.5482191279740904,
      "MetricsIntensity" : 0.06090975840950456,
      "Density" : 3.1989730423620024,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "beb969a6-bb17-4373-8297-d66cbf2a44dc",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5496559121504025,
      "MetricsIntensity" : 0.061006359571509676,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 34.033980582991134,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7567237163814182,
      "LackOfCohesion" : 0.5496559121504025,
      "MetricsIntensity" : 0.061006359571509676,
      "Density" : 3.204618345093008,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "70680490-df2e-4c62-9469-3223af997344",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5456775142171612,
      "MetricsIntensity" : 0.06104026757416164,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 35.03286859791814,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756425948592411,
      "LackOfCohesion" : 0.5456775142171612,
      "MetricsIntensity" : 0.06104026757416163,
      "Density" : 3.2021822849807453,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3dcbac4a-8dec-4497-91b8-17b065b78186",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5494209218411834,
      "MetricsIntensity" : 0.06096469319954267,
      "Density" : 0.997997997997998
    },
    "euclideanDistance" : 35.032894180369915,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620798,
      "LackOfCohesion" : 0.5494209218411834,
      "MetricsIntensity" : 0.06096469319954266,
      "Density" : 3.199614890885751,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a65e165d-30cb-43b5-992c-67d490171c37",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5477913881782519,
      "MetricsIntensity" : 0.060883450821111955,
      "Density" : 1.0014014014014014
    },
    "euclideanDistance" : 35.03296564055189,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.755813953488372,
      "LackOfCohesion" : 0.5477913881782519,
      "MetricsIntensity" : 0.060883450821111955,
      "Density" : 3.2105263157894743,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.AbstractServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "ac380644-8d67-42c0-8760-9852774a6c28",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.551480172762308,
      "MetricsIntensity" : 0.06103035891949756,
      "Density" : 0.998998998998999
    },
    "euclideanDistance" : 35.032975127910454,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7559633027522943,
      "LackOfCohesion" : 0.551480172762308,
      "MetricsIntensity" : 0.06103035891949756,
      "Density" : 3.200769724182168,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "55663958-0186-4989-ba01-4e36946e1355",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5471153533880573,
      "MetricsIntensity" : 0.06092181500972953,
      "Density" : 1.0026026026026027
    },
    "euclideanDistance" : 36.032093345840096,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7581139007960809,
      "LackOfCohesion" : 0.5471153533880573,
      "MetricsIntensity" : 0.06092181500972953,
      "Density" : 3.2164418754014132,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "527df56d-65cb-4861-857d-389cb74467da",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.548420643856843,
      "MetricsIntensity" : 0.06088214902987989,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 37.03113508230843,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.548420643856843,
      "MetricsIntensity" : 0.06088214902987989,
      "Density" : 3.2034659820282414,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3db4567d-538e-4997-9390-b722eddbedef",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5502257950783191,
      "MetricsIntensity" : 0.06101742513416623,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 37.03121064364031,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7571865443425077,
      "LackOfCohesion" : 0.5502257950783191,
      "MetricsIntensity" : 0.06101742513416623,
      "Density" : 3.202694034637588,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cddb05bc-5e89-4bee-a68d-ea0de4e670a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5462336746429244,
      "MetricsIntensity" : 0.06096716063280094,
      "Density" : 1.0028028028028029
    },
    "euclideanDistance" : 37.0312664140016,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7590214067278285,
      "LackOfCohesion" : 0.5462336746429244,
      "MetricsIntensity" : 0.06096716063280093,
      "Density" : 3.217084136159281,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1dfff9d5-cb8f-49b7-b1d7-518303819133",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5470125944500369,
      "MetricsIntensity" : 0.06089073452557244,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 38.03024358738648,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756889161053276,
      "LackOfCohesion" : 0.5470125944500369,
      "MetricsIntensity" : 0.060890734525572456,
      "Density" : 3.199100834938985,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.AbstractServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "4ad7d82c-bab1-461b-9008-327674018f68",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5492107015932152,
      "MetricsIntensity" : 0.060944888787578026,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 40.028812626903,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7558139534883719,
      "LackOfCohesion" : 0.5492107015932152,
      "MetricsIntensity" : 0.06094488878757803,
      "Density" : 3.2034659820282414,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "52abd6d5-af59-48f4-b3b2-c6fd8696be48",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5467343628556375,
      "MetricsIntensity" : 0.061033000504703894,
      "Density" : 0.997997997997998
    },
    "euclideanDistance" : 42.0273808141847,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.755813953488372,
      "LackOfCohesion" : 0.5467343628556375,
      "MetricsIntensity" : 0.061033000504703894,
      "Density" : 3.2016698779704553,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "91a699c4-0e58-4f0f-9fd0-9e960899fa54",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5455309585126005,
      "MetricsIntensity" : 0.06092821025273504,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 42.02739356561379,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.755813953488372,
      "LackOfCohesion" : 0.5455309585126005,
      "MetricsIntensity" : 0.06092821025273504,
      "Density" : 3.2055234425176615,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1f72530e-b0d2-4862-a8f5-e316ec27ac4a",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5468538256130827,
      "MetricsIntensity" : 0.06103709477898738,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 43.026727408547345,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7558139534883723,
      "LackOfCohesion" : 0.5468538256130827,
      "MetricsIntensity" : 0.06103709477898738,
      "Density" : 3.201156812339332,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "4bcfd79b-e52c-467d-996e-635d70ae1d1a",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5462220535455589,
      "MetricsIntensity" : 0.06098286367411638,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 45.02557685457163,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7568891610532762,
      "LackOfCohesion" : 0.5462220535455589,
      "MetricsIntensity" : 0.06098286367411638,
      "Density" : 3.2055234425176633,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d53631d-810c-4096-a188-30aa37d39349",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5473045226571864,
      "MetricsIntensity" : 0.06104769494486705,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 46.025035193701775,
    "generation" : 0,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7552019583843328,
      "LackOfCohesion" : 0.5473045226571864,
      "MetricsIntensity" : 0.06104769494486705,
      "Density" : 3.2088688946015425,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotSwitcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e30ab02-ee48-4375-b33c-5b1903e839fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5482854241417868,
      "MetricsIntensity" : 0.06111141200250862,
      "Density" : 0.9937937937937938
    },
    "euclideanDistance" : 55.02080686628165,
    "generation" : 0,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753676470588235,
      "LackOfCohesion" : 0.5482854241417868,
      "MetricsIntensity" : 0.06111141200250862,
      "Density" : 3.19639407598197,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.PortUnificationExchanger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "32f85910-a838-47a0-9154-2801dd9b2bbd",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5507207991060223,
      "MetricsIntensity" : 0.06111210342851399,
      "Density" : 0.993993993993994
    },
    "euclideanDistance" : 55.02083480599807,
    "generation" : 0,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753676470588235,
      "LackOfCohesion" : 0.5507207991060223,
      "MetricsIntensity" : 0.06111210342851399,
      "Density" : 3.1929260450160766,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.StubMethodDescriptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.common.beans.factory.ScopeBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboMvcEndpointManagementContextConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.cache.support.lru.LruCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.qos.server.handler.HttpProcessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.context.DubboBootstrapStartStopListenerSpringAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.AbstractServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "8d28d308-3651-43d4-9a80-f3fdde1dd28f",
    "objectives" : {
      "NumberOfConcerns" : 0.9954640614096302,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5440898107962371,
      "MetricsIntensity" : 0.06130726481834841,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 74.01545473995559,
    "generation" : 0,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7513812154696131,
      "LackOfCohesion" : 0.5440898107962371,
      "MetricsIntensity" : 0.061307264818348396,
      "Density" : 3.2112041210560207,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.URLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.URLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.StandardMeshRuleRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.merger.FloatArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient.CuratorWatcherImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.DestroyableExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.builder.CollectionTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.builder.CollectionTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.builder.CollectionTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.metadata.annotation.processing.builder.CollectionTypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.common.config.PrefixedConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.extension.SpringExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.utils.ClassFinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.script.ScriptStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.config.EnvironmentConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.config.EnvironmentConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.stream.StreamUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.StreamUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.rpc.protocol.tri.stream.StreamUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedInjectElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ClientDelegate'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ClientDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.model.TypeDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.model.TypeDefinition'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.model.TypeDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.cache.support.jcache.JCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.logger.jcl.JclLoggerAdapter'"
      } ]
    } ]
  } ]
}