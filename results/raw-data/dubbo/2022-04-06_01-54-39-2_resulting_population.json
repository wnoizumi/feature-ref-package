{
  "executionId" : "0cf0c118-0f34-4586-a6e0-7b85da301513",
  "computingTime" : 12492,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.216355441081779,
    "meanNumConcerns" : 1.7593615715162678,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "1f27596f-b6d5-4708-8bb2-9a102299331f",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784067,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 8.143409501880395,
    "generation" : 0,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784067,
      "Density" : 3.2057692307692305,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "176ba9c2-d1e7-43e6-a5c7-76778150f71b",
    "objectives" : {
      "NumberOfConcerns" : 1.0062805303558968,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5455640110042079,
      "MetricsIntensity" : 0.06079878801563756,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 10.115491461125025,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75960951799878,
      "LackOfCohesion" : 0.5455640110042079,
      "MetricsIntensity" : 0.06079878801563755,
      "Density" : 3.2104926423544473,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c350a9e-a927-459a-8320-3145e515e182",
    "objectives" : {
      "NumberOfConcerns" : 1.0059316120027912,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5476985435726733,
      "MetricsIntensity" : 0.06079776864037189,
      "Density" : 1.0044044044044045
    },
    "euclideanDistance" : 10.115552218189416,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758999389871872,
      "LackOfCohesion" : 0.5476985435726733,
      "MetricsIntensity" : 0.06079776864037189,
      "Density" : 3.21190781049936,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a226a17b-b7e2-4b69-a649-127fc5023842",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5407836230932697,
      "MetricsIntensity" : 0.061077940901491865,
      "Density" : 1.0042042042042043
    },
    "euclideanDistance" : 14.082091516676856,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7599754450583187,
      "LackOfCohesion" : 0.5407836230932697,
      "MetricsIntensity" : 0.061077940901491865,
      "Density" : 3.2298776561493887,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    } ]
  }, {
    "solutionId" : "c8b53f4d-5e3c-498b-945b-dd7e5073a2f7",
    "objectives" : {
      "NumberOfConcerns" : 1.0045359385903698,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5460509463946568,
      "MetricsIntensity" : 0.06084836221646528,
      "Density" : 1.0006006006006005
    },
    "euclideanDistance" : 19.060749412682725,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7576312576312578,
      "LackOfCohesion" : 0.5460509463946568,
      "MetricsIntensity" : 0.06084836221646528,
      "Density" : 3.201793721973094,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a53dbfb9-907b-470b-b0be-47e9fcc6eddd",
    "objectives" : {
      "NumberOfConcerns" : 1.0045359385903698,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.546432977178288,
      "MetricsIntensity" : 0.06086009720203434,
      "Density" : 1.001001001001001
    },
    "euclideanDistance" : 19.060781421702103,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7587049480757477,
      "LackOfCohesion" : 0.546432977178288,
      "MetricsIntensity" : 0.06086009720203434,
      "Density" : 3.2030749519538753,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ca96709d-6f67-4209-84cf-4c59b60acaf7",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5444215897215208,
      "MetricsIntensity" : 0.060888953986918126,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 21.05514488953661,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5444215897215208,
      "MetricsIntensity" : 0.06088895398691812,
      "Density" : 3.2125480153649173,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "abbc6165-e865-4a25-95b3-c7b762fd670a",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5471856464895353,
      "MetricsIntensity" : 0.060927066638770684,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 22.052458269811066,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7579462102689485,
      "LackOfCohesion" : 0.5471856464895353,
      "MetricsIntensity" : 0.060927066638770684,
      "Density" : 3.2032051282051293,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d51ba57-abe9-4b8f-9249-fb045fe9e3d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5470136592213819,
      "MetricsIntensity" : 0.06090389513966881,
      "Density" : 1.0048048048048048
    },
    "euclideanDistance" : 23.050400376027955,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758094074526573,
      "LackOfCohesion" : 0.5470136592213819,
      "MetricsIntensity" : 0.06090389513966881,
      "Density" : 3.217307692307693,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a55fc2a5-6de3-40e3-8ed8-5402f57e42d5",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5459036367646117,
      "MetricsIntensity" : 0.060914755622231205,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 25.046195875125232,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7555012224938875,
      "LackOfCohesion" : 0.5459036367646117,
      "MetricsIntensity" : 0.060914755622231205,
      "Density" : 3.211538461538462,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "19ba205b-cea9-440c-af52-219ae7672c82",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5459031802619279,
      "MetricsIntensity" : 0.06097565725778332,
      "Density" : 1.0042042042042043
    },
    "euclideanDistance" : 25.046258108131436,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7561124694376526,
      "LackOfCohesion" : 0.5459031802619279,
      "MetricsIntensity" : 0.060975657257783325,
      "Density" : 3.2174470814624767,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3931c50d-4fa6-45fb-9ea7-29b210813bec",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5437673152812756,
      "MetricsIntensity" : 0.06097051909960955,
      "Density" : 1.0044044044044045
    },
    "euclideanDistance" : 29.039914257390073,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7602446483180427,
      "LackOfCohesion" : 0.5437673152812756,
      "MetricsIntensity" : 0.06097051909960955,
      "Density" : 3.218088518280949,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "558bb942-0a69-4c49-ba2b-6c41b1561839",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5458586654159298,
      "MetricsIntensity" : 0.060995038086569545,
      "Density" : 1.0032032032032032
    },
    "euclideanDistance" : 30.038560040149424,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7590214067278285,
      "LackOfCohesion" : 0.5458586654159298,
      "MetricsIntensity" : 0.060995038086569545,
      "Density" : 3.2142398973701085,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "64f4cc70-2b99-4d34-a806-3fecd2c56c6b",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.545293431920304,
      "MetricsIntensity" : 0.06094490378354931,
      "Density" : 1.0028028028028029
    },
    "euclideanDistance" : 31.037317284860734,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7602446483180427,
      "LackOfCohesion" : 0.545293431920304,
      "MetricsIntensity" : 0.06094490378354931,
      "Density" : 3.212957023733163,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1824de68-8276-44e2-bb82-e529594abd12",
    "objectives" : {
      "NumberOfConcerns" : 1.0055826936496859,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5456108170826133,
      "MetricsIntensity" : 0.06093335134171911,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 32.036258068045086,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7616136919315406,
      "LackOfCohesion" : 0.5456108170826133,
      "MetricsIntensity" : 0.06093335134171911,
      "Density" : 3.2166666666666663,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d29607b1-ac9f-4535-8eef-39424ec5ed5d",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5450234003786912,
      "MetricsIntensity" : 0.06091066322494553,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 33.03499317547607,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5450234003786912,
      "MetricsIntensity" : 0.060910663224945524,
      "Density" : 3.215522771007056,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef76145c-d7b6-420a-9ada-7e1c1a2a5d65",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.543830728302582,
      "MetricsIntensity" : 0.06101158473622802,
      "Density" : 0.9985985985985986
    },
    "euclideanDistance" : 34.033788623094196,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7558139534883719,
      "LackOfCohesion" : 0.543830728302582,
      "MetricsIntensity" : 0.06101158473622801,
      "Density" : 3.199486850545222,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "0d38b150-e117-4394-81c7-c5c5c459e29e",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5450001992382384,
      "MetricsIntensity" : 0.06103306032555399,
      "Density" : 1.005005005005005
    },
    "euclideanDistance" : 34.03405758506218,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7594859241126073,
      "LackOfCohesion" : 0.5450001992382384,
      "MetricsIntensity" : 0.06103306032555398,
      "Density" : 3.2220795892169445,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b28fa891-ec12-426c-8d28-279e5b28f67c",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5422367489736402,
      "MetricsIntensity" : 0.06101769620089056,
      "Density" : 1.001001001001001
    },
    "euclideanDistance" : 35.03291791073731,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7588739290085678,
      "LackOfCohesion" : 0.5422367489736402,
      "MetricsIntensity" : 0.061017696200890564,
      "Density" : 3.2071840923669024,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "37ac01f6-53a2-404c-9129-b18c3905f013",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5453259929684964,
      "MetricsIntensity" : 0.06102185934488215,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 35.03293301122253,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7582619339045293,
      "LackOfCohesion" : 0.5453259929684964,
      "MetricsIntensity" : 0.06102185934488214,
      "Density" : 3.206675224646983,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b4480d61-5f6a-4676-ae2a-82423887798e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5475949577841893,
      "MetricsIntensity" : 0.06106880651246965,
      "Density" : 1.0032032032032032
    },
    "euclideanDistance" : 35.03298454747806,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7550520514390693,
      "LackOfCohesion" : 0.5475949577841893,
      "MetricsIntensity" : 0.06106880651246965,
      "Density" : 3.220437017994859,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "104f381b-ebe7-4b6b-8a1f-4b00b5bb41c2",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5455384077228752,
      "MetricsIntensity" : 0.06108068977197705,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 35.0329965925858,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7570379436964505,
      "LackOfCohesion" : 0.5455384077228752,
      "MetricsIntensity" : 0.06108068977197705,
      "Density" : 3.215661103979461,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "db716349-e55c-4548-9331-98cda60f3475",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5455381809933254,
      "MetricsIntensity" : 0.061052449485047046,
      "Density" : 1.0006006006006005
    },
    "euclideanDistance" : 38.03032124719907,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7564259485924114,
      "LackOfCohesion" : 0.5455381809933254,
      "MetricsIntensity" : 0.061052449485047046,
      "Density" : 3.2100192678227355,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "effc32af-773a-4e2d-a25f-f70a2dabf0c0",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5459665614968391,
      "MetricsIntensity" : 0.06095750356246165,
      "Density" : 1.004004004004004
    },
    "euclideanDistance" : 38.03045371578988,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7577981651376144,
      "LackOfCohesion" : 0.5459665614968391,
      "MetricsIntensity" : 0.06095750356246165,
      "Density" : 3.2168056446440025,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cbf3f13c-7417-4bdc-8d78-7f822d48a930",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5441871417403596,
      "MetricsIntensity" : 0.06104632352489307,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 40.028882969777605,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758873929008568,
      "LackOfCohesion" : 0.5441871417403596,
      "MetricsIntensity" : 0.06104632352489307,
      "Density" : 3.215661103979461,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5cb82ff1-054d-416b-a2b5-395d66bd85cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5426733266714852,
      "MetricsIntensity" : 0.06095761674911265,
      "Density" : 1.0048048048048048
    },
    "euclideanDistance" : 40.02889873189968,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758261933904529,
      "LackOfCohesion" : 0.5426733266714852,
      "MetricsIntensity" : 0.06095761674911265,
      "Density" : 3.219371391917896,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "6fe6d2a2-7a61-4261-8081-e19c9a37c61a",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5439732386314508,
      "MetricsIntensity" : 0.060944925718021965,
      "Density" : 1.0028028028028029
    },
    "euclideanDistance" : 41.0281285124662,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7568891610532757,
      "LackOfCohesion" : 0.5439732386314508,
      "MetricsIntensity" : 0.06094492571802197,
      "Density" : 3.2170841361592806,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d73d45ef-9b58-44b8-bcb6-1d37e0f3da10",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5438505615282156,
      "MetricsIntensity" : 0.06100846980498803,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 43.026885981689134,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7587262706674829,
      "LackOfCohesion" : 0.5438505615282156,
      "MetricsIntensity" : 0.061008469804988016,
      "Density" : 3.2228644829800905,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.utils.DefaultConfigValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.RegistryNotifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6ed30e2-c1a7-4d59-94f5-27dbe12afcc9",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5435694354340446,
      "MetricsIntensity" : 0.06109168049729136,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 44.02621955429885,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7564259485924107,
      "LackOfCohesion" : 0.5435694354340446,
      "MetricsIntensity" : 0.06109168049729137,
      "Density" : 3.2135984605516352,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.remoting.buffer.HeapChannelBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "20d28609-0322-47be-b573-3289be35d73d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993021632937893,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5454135553931577,
      "MetricsIntensity" : 0.06099590505541143,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 46.02497800564302,
    "generation" : 0,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7538273116962655,
      "LackOfCohesion" : 0.5454135553931577,
      "MetricsIntensity" : 0.06099590505541143,
      "Density" : 3.2061657032755293,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "da974b37-4c7e-45e4-a40d-6128fa3d03a5",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5451111076478287,
      "MetricsIntensity" : 0.060961893375413835,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 47.02455508161392,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7556644213104717,
      "LackOfCohesion" : 0.5451111076478287,
      "MetricsIntensity" : 0.060961893375413835,
      "Density" : 3.217586649550706,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "843b412f-efb5-45a6-aaf0-35c813e3bec2",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5444539224241535,
      "MetricsIntensity" : 0.061104216504735694,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 48.02403650205316,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7556644213104715,
      "LackOfCohesion" : 0.5444539224241535,
      "MetricsIntensity" : 0.061104216504735694,
      "Density" : 3.219653179190752,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.config.bootstrap.builders.MonitorBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.util.EnvironmentUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.spring.boot.beans.factory.config.ServiceBeanIdConflictProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.config.bootstrap.builders.ArgumentBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.filter.tps.StatItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6a4488b5-fe64-4308-8b98-7468c56dbcf1",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5437186620567942,
      "MetricsIntensity" : 0.061187999423573274,
      "Density" : 1.002002002002002
    },
    "euclideanDistance" : 55.02091683671161,
    "generation" : 0,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7542892156862748,
      "LackOfCohesion" : 0.5437186620567942,
      "MetricsIntensity" : 0.06118799942357328,
      "Density" : 3.216580976863753,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.support.MockInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.rpc.model.ConsumerMethodModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.qos.command.impl.EnableRouterSnapshot'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.rpc.filter.tps.DefaultTPSLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.support.RpcUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationPostProcessor.ScanExcludeFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelBucket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.TextDataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      } ]
    } ]
  }, {
    "solutionId" : "d6231954-94df-43af-88aa-846a0f26bb63",
    "objectives" : {
      "NumberOfConcerns" : 0.9930216329378926,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5449749821306746,
      "MetricsIntensity" : 0.06134828332401892,
      "Density" : 0.9913913913913914
    },
    "euclideanDistance" : 74.01533429092531,
    "generation" : 0,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747084100675261,
      "LackOfCohesion" : 0.5449749821306746,
      "MetricsIntensity" : 0.06134828332401891,
      "Density" : 3.19277885235332,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaSerialization'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.api.NettyEventLoopFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.codec.TransportCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.rpc.protocol.tri.call.ServerCall.ServerStreamListenerBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.common.url.component.param.DefaultDynamicParamSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.PbArrayPacker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.bytecode.NoSuchMethodException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.bytecode.NoSuchMethodException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.common.url.component.URLParam.URLParamMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.stub.BiStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.stub.BiStreamMethodHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.filter.ProfilerServerFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.filter.ProfilerServerFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.utils.JsonUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.common.utils.JsonUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.registry.status.RegistryStatusChecker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfClusterFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfClusterFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfClusterFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.cluster.ClusterScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='com.alibaba.dubbo.rpc.Result.CompatibleResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='com.alibaba.dubbo.rpc.Result.CompatibleResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='com.alibaba.dubbo.rpc.Result.CompatibleResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='com.alibaba.dubbo.rpc.Result.CompatibleResult'"
      } ]
    } ]
  } ]
}