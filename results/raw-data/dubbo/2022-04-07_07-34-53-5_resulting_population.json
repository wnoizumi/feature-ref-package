{
  "executionId" : "853c68c8-e785-4ad8-8b6a-7e93864accde",
  "computingTime" : 4531749,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 32,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "5a8163c8-772a-4c4d-924e-20c112498882",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5419657167609356,
      "MetricsIntensity" : 0.060800617142487155,
      "Density" : 1.0
    },
    "euclideanDistance" : 12.095549999950462,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5419657167609356,
      "MetricsIntensity" : 0.060800617142487155,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "ebcebcd1-605e-4eb7-85de-18844f4a303a",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5419657167609356,
      "MetricsIntensity" : 0.060800617142487155,
      "Density" : 1.0
    },
    "euclideanDistance" : 12.095549999950462,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5419657167609356,
      "MetricsIntensity" : 0.060800617142487155,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "fe0d6a5e-6c53-4747-99c5-646ee93279a1",
    "objectives" : {
      "NumberOfConcerns" : 1.0028001400070004,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5420965383203288,
      "MetricsIntensity" : 0.06079876478963545,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 12.095617804815689,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7533659730722155,
      "LackOfCohesion" : 0.5420965383203288,
      "MetricsIntensity" : 0.06079876478963545,
      "Density" : 3.2095846645367407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "8fbdd247-2443-44be-a43d-6f894f513c68",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5419343195866814,
      "MetricsIntensity" : 0.060799398308082855,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.088250288777834,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5419343195866814,
      "MetricsIntensity" : 0.06079939830808286,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "d05fe6ec-c5b3-42ea-a07a-057a17942a99",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5419420499515547,
      "MetricsIntensity" : 0.06079196886447217,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.08825057435472,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5419420499515547,
      "MetricsIntensity" : 0.06079196886447217,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "d37f2a98-db4b-4662-af38-69a8c552a20f",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5419420499515545,
      "MetricsIntensity" : 0.06079721917990553,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.088250598742302,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5419420499515545,
      "MetricsIntensity" : 0.06079721917990553,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "af7c032f-b8ef-40d7-98c0-2570648893af",
    "objectives" : {
      "NumberOfConcerns" : 1.0024501225061253,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5415370316893935,
      "MetricsIntensity" : 0.06079536682705379,
      "Density" : 1.0
    },
    "euclideanDistance" : 14.08196948872675,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7527539779681764,
      "LackOfCohesion" : 0.5415370316893935,
      "MetricsIntensity" : 0.0607953668270538,
      "Density" : 3.2083067092651754
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.unlock()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "33a258ba-b6e4-4e03-bf94-0adcc90c7d57",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5507747451248094,
      "MetricsIntensity" : 0.060010894749389955,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 86.01339924754903,
    "generation" : 1,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5507747451248094,
      "MetricsIntensity" : 0.06001089474938995,
      "Density" : 3.2230769230769223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1234e2fe-cee4-4225-90b6-27458024ee9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5508402587516437,
      "MetricsIntensity" : 0.06001089474938994,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 86.01339966708132,
    "generation" : 1,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5508402587516437,
      "MetricsIntensity" : 0.06001089474938994,
      "Density" : 3.2230769230769227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8a91110a-08f6-450a-928a-1bd388a52054",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5508495138513078,
      "MetricsIntensity" : 0.06001026023484434,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 86.0134020448626,
    "generation" : 1,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5508495138513078,
      "MetricsIntensity" : 0.06001026023484434,
      "Density" : 3.2237179487179493
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "3df90d0d-0ba9-4035-b373-d15a91395bff",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5512333405126499,
      "MetricsIntensity" : 0.060010894749389934,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 86.0134021853228,
    "generation" : 1,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5512333405126499,
      "MetricsIntensity" : 0.06001089474938993,
      "Density" : 3.2230769230769223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "ee892f1f-23df-44fb-b9dc-3ea9f1ac75c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5508263384694452,
      "MetricsIntensity" : 0.0600043717527806,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 86.01340363346306,
    "generation" : 1,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7469362745098045,
      "LackOfCohesion" : 0.5508263384694452,
      "MetricsIntensity" : 0.06000437175278061,
      "Density" : 3.2230769230769223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "6d5addc3-143b-4266-a23d-307de90ec05f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.550855123605884,
      "MetricsIntensity" : 0.0600067873644063,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 87.01324347092206,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.550855123605884,
      "MetricsIntensity" : 0.06000678736440631,
      "Density" : 3.222435897435897
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "aca62162-2baf-44c8-94e1-d359b2c7a824",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5508262201173221,
      "MetricsIntensity" : 0.06001026023484433,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 87.01324558219291,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5508262201173221,
      "MetricsIntensity" : 0.06001026023484433,
      "Density" : 3.2230769230769227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "0bb61c51-11ac-4bb2-9d0b-3a936a16c33f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.550826577627998,
      "MetricsIntensity" : 0.06000742187895194,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 87.01324558249863,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.550826577627998,
      "MetricsIntensity" : 0.06000742187895194,
      "Density" : 3.2230769230769223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "32aca5b1-fa8c-4469-a4bc-2b91d48b1927",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5508126267945193,
      "MetricsIntensity" : 0.06001089474938994,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 87.0132540950742,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746936274509804,
      "LackOfCohesion" : 0.5508126267945193,
      "MetricsIntensity" : 0.06001089474938995,
      "Density" : 3.2222934016655995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "f7b846e9-8e2f-4ce1-936a-14e50190515e",
    "objectives" : {
      "NumberOfConcerns" : 0.9982499124956248,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.06003329427130976,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 87.01326008131073,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747549019607843,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.06003329427130976,
      "Density" : 3.2229340166559894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "fbea565b-b5ef-44ab-959b-b8c08e1090fc",
    "objectives" : {
      "NumberOfConcerns" : 0.9982499124956248,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.06003329427130976,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 87.01326008131073,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747549019607843,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.060033294271309774,
      "Density" : 3.222934016655989
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "c2beb47a-f57d-48d1-8dd7-8d1042fdf17c",
    "objectives" : {
      "NumberOfConcerns" : 0.9982499124956248,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.06003329427130976,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 87.01326008131073,
    "generation" : 1,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747549019607843,
      "LackOfCohesion" : 0.5507593455683328,
      "MetricsIntensity" : 0.06003329427130977,
      "Density" : 3.222934016655989
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "47efa6ff-4785-4d8c-97f9-c09ef8d742e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 88.0,
      "LackOfCohesion" : 0.5502340302710048,
      "MetricsIntensity" : 0.06001587875981048,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 88.01309988717813,
    "generation" : 1,
    "numberOfRefactorings" : 88,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7469362745098043,
      "LackOfCohesion" : 0.5502340302710048,
      "MetricsIntensity" : 0.06001587875981048,
      "Density" : 3.222293401665599
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "3ee9fdec-1c61-49d6-b9ef-3070d619cd92",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 88.0,
      "LackOfCohesion" : 0.5508279822461954,
      "MetricsIntensity" : 0.06000420421983404,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 88.01310359444878,
    "generation" : 1,
    "numberOfRefactorings" : 88,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7469362745098043,
      "LackOfCohesion" : 0.5508279822461954,
      "MetricsIntensity" : 0.06000420421983403,
      "Density" : 3.2222934016655995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "44c1f941-1c47-4972-82e9-985d46f9e3a6",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5498313506023037,
      "MetricsIntensity" : 0.06001438361280846,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 89.01295022971078,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746936274509804,
      "LackOfCohesion" : 0.5498313506023037,
      "MetricsIntensity" : 0.06001438361280846,
      "Density" : 3.222293401665599
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "e904ae22-8105-4471-b125-f83e3d247102",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5502061982750532,
      "MetricsIntensity" : 0.060014383612808454,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 89.01295254592718,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746936274509804,
      "LackOfCohesion" : 0.5502061982750532,
      "MetricsIntensity" : 0.06001438361280845,
      "Density" : 3.222293401665599
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "5abfa5e1-3053-41c9-8a1f-596289b41abc",
    "objectives" : {
      "NumberOfConcerns" : 0.9971998599929996,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5509316795187756,
      "MetricsIntensity" : 0.0600119827469602,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 90.01280311083076,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7457107843137254,
      "LackOfCohesion" : 0.5509316795187756,
      "MetricsIntensity" : 0.0600119827469602,
      "Density" : 3.2216527866752087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "a1c9b9e5-a5de-4b6d-a1ca-07b95d4b4cf2",
    "objectives" : {
      "NumberOfConcerns" : 0.9971998599929996,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5509803495947571,
      "MetricsIntensity" : 0.06001134823241457,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 90.01280340831057,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7457107843137252,
      "LackOfCohesion" : 0.5509803495947571,
      "MetricsIntensity" : 0.06001134823241457,
      "Density" : 3.2216527866752087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a12b003-aeb8-436f-9bcc-ef29c5871403",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5507455998429777,
      "MetricsIntensity" : 0.060010713717868945,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 90.01280584958141,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5507455998429777,
      "MetricsIntensity" : 0.06001071371786896,
      "Density" : 3.2216527866752087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "408b749b-74bf-4de3-ad2e-9178031c2d8e",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5507178727854272,
      "MetricsIntensity" : 0.060013749098262834,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 91.01266497987199,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746323529411765,
      "LackOfCohesion" : 0.5507178727854272,
      "MetricsIntensity" : 0.060013749098262834,
      "Density" : 3.2216527866752087
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "6bac371c-a531-41ee-a027-440c1a661d6b",
    "objectives" : {
      "NumberOfConcerns" : 0.9968498424921246,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5501324983540284,
      "MetricsIntensity" : 0.059994037241326785,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 93.01237523730651,
    "generation" : 1,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7450980392156858,
      "LackOfCohesion" : 0.5501324983540284,
      "MetricsIntensity" : 0.05999403724132679,
      "Density" : 3.219730941704036
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.common.resource.GlobalResourcesRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8284e84a-cf9a-4f49-b6f8-6367efda598d",
    "objectives" : {
      "NumberOfConcerns" : 0.9964998249912496,
      "NumberOfRefactorings" : 97.0,
      "LackOfCohesion" : 0.5504860197068833,
      "MetricsIntensity" : 0.060023702373326444,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 97.0118716331158,
    "generation" : 1,
    "numberOfRefactorings" : 97,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7444852941176467,
      "LackOfCohesion" : 0.5504860197068833,
      "MetricsIntensity" : 0.06002370237332645,
      "Density" : 3.2222934016656013
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3af38a0-a802-454a-9dee-d29fa90e55da",
    "objectives" : {
      "NumberOfConcerns" : 0.9964998249912496,
      "NumberOfRefactorings" : 98.0,
      "LackOfCohesion" : 0.5515729201475829,
      "MetricsIntensity" : 0.05998738307149359,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 98.01175049178396,
    "generation" : 1,
    "numberOfRefactorings" : 98,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7444852941176467,
      "LackOfCohesion" : 0.5515729201475829,
      "MetricsIntensity" : 0.059987383071493594,
      "Density" : 3.2203715566944267
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.common.resource.GlobalResourcesRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.netty.NettyChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "109d8ce4-4cec-4d2d-a699-fce1528e317b",
    "objectives" : {
      "NumberOfConcerns" : 0.9968498424921246,
      "NumberOfRefactorings" : 102.0,
      "LackOfCohesion" : 0.5514212103554451,
      "MetricsIntensity" : 0.05997715837115753,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 102.01129428868187,
    "generation" : 1,
    "numberOfRefactorings" : 102,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.745098039215686,
      "LackOfCohesion" : 0.5514212103554451,
      "MetricsIntensity" : 0.05997715837115753,
      "Density" : 3.221012171684817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.common.resource.GlobalResourcesRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.netty.NettyChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "3f9cacf9-ac2b-4800-b703-28d6076b1232",
    "objectives" : {
      "NumberOfConcerns" : 0.9961498074903745,
      "NumberOfRefactorings" : 106.0,
      "LackOfCohesion" : 0.5528324570927543,
      "MetricsIntensity" : 0.05999773000893764,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 106.01086327275591,
    "generation" : 1,
    "numberOfRefactorings" : 106,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7438725490196079,
      "LackOfCohesion" : 0.5528324570927543,
      "MetricsIntensity" : 0.05999773000893764,
      "Density" : 3.2190903267136455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.remoting.exchange.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.beans.support.InstantiationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.protocol.injvm.DefaultParamDeepCopyUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.MultiMessageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.RpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.utils.ClassFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.config.ConfigurationCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.common.resource.GlobalResourcesRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.mvc.DubboMvcEndpoint'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.netty.NettyChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.jcache.JCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.common.extension.support.WrapperComparator.OrderInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  } ]
}