{
  "executionId" : "7adacb79-95b6-4c28-9535-c52ef2b95329",
  "computingTime" : 4626668,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 40,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1548304542546384,
    "meanNumConcerns" : 1.69122160834868,
    "meanMetricsIntensity" : 0.061203021412645116,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "197e062a-474d-4ca3-9590-8ecbe23c720d",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 106.0,
      "LackOfCohesion" : 0.5487213433331553,
      "MetricsIntensity" : 0.06038841775651872,
      "Density" : 1.0004055972419388
    },
    "euclideanDistance" : 106.01084392801147,
    "generation" : 1,
    "numberOfRefactorings" : 106,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5487213433331553,
      "MetricsIntensity" : 0.06038841775651873,
      "Density" : 3.1480536056158264
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "44ad4270-9b21-4375-a64b-f16f62363329",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 106.0,
      "LackOfCohesion" : 0.5502744323392978,
      "MetricsIntensity" : 0.06038309063216741,
      "Density" : 1.0002027986209694
    },
    "euclideanDistance" : 106.01084664954783,
    "generation" : 1,
    "numberOfRefactorings" : 106,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5502744323392978,
      "MetricsIntensity" : 0.060383090632167416,
      "Density" : 3.1474154435226556
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "60881eb6-b75d-47ea-97e4-c9207803b8dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5472722385291876,
      "MetricsIntensity" : 0.06043325733718596,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 107.01072234270327,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875155,
      "LackOfCohesion" : 0.5472722385291876,
      "MetricsIntensity" : 0.06043325733718596,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "95084aef-9781-4770-bb30-e18e7c7193fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5472502420953234,
      "MetricsIntensity" : 0.060431990300291095,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 107.01072412365971,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875155,
      "LackOfCohesion" : 0.5472502420953234,
      "MetricsIntensity" : 0.060431990300291095,
      "Density" : 3.1475095785440614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e1a1845d-03ff-428f-a1dd-8d30232c1f38",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5464687629778943,
      "MetricsIntensity" : 0.06042878650699983,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 107.01072540305303,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6805385556915544,
      "LackOfCohesion" : 0.5464687629778943,
      "MetricsIntensity" : 0.060428786506999836,
      "Density" : 3.148148148148149
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b0e22248-3c4a-4f3d-a84d-440d16d87c87",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5472652102647024,
      "MetricsIntensity" : 0.060423810254404034,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 107.01072609013619,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5472652102647024,
      "MetricsIntensity" : 0.060423810254404034,
      "Density" : 3.148148148148148
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a620cd0c-4f01-4e41-baf2-47ae775156de",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5473562662231054,
      "MetricsIntensity" : 0.06042589877675819,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 107.01072614858018,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5473562662231054,
      "MetricsIntensity" : 0.060425898776758184,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "83ea7ad0-15aa-4eb9-bb61-2c9c4755c48a",
    "objectives" : {
      "NumberOfConcerns" : 0.9960072595281306,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5502677164611611,
      "MetricsIntensity" : 0.06038331340788522,
      "Density" : 1.0002027986209694
    },
    "euclideanDistance" : 107.01074187577488,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6793145654834758,
      "LackOfCohesion" : 0.5502677164611611,
      "MetricsIntensity" : 0.06038331340788521,
      "Density" : 3.147415443522655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setMetadataStorageType(ServiceInstance, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "dfb2d91d-38a3-4465-856b-958abd1d5e11",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5500724393271085,
      "MetricsIntensity" : 0.06039343021016868,
      "Density" : 1.0002027986209694
    },
    "euclideanDistance" : 107.01074425654812,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.5500724393271085,
      "MetricsIntensity" : 0.06039343021016867,
      "Density" : 3.147415443522655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "cc089cd4-53a4-455d-88ec-ed71fea43666",
    "objectives" : {
      "NumberOfConcerns" : 0.9970961887477314,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5488070886147292,
      "MetricsIntensity" : 0.060382231951377756,
      "Density" : 1.0002027986209694
    },
    "euclideanDistance" : 107.01074451513004,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6811505507955942,
      "LackOfCohesion" : 0.5488070886147292,
      "MetricsIntensity" : 0.060382231951377756,
      "Density" : 3.1494252873563213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7de432aa-6df6-4ea7-a0e3-887d7cd35c07",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5501414458674536,
      "MetricsIntensity" : 0.06039343021016867,
      "Density" : 1.0002027986209694
    },
    "euclideanDistance" : 107.01074461128799,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5501414458674536,
      "MetricsIntensity" : 0.06039343021016867,
      "Density" : 3.147415443522655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "18c1cb80-0907-48a1-b3df-24d4265540be",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5473306711777378,
      "MetricsIntensity" : 0.06039961124206069,
      "Density" : 0.9991888055161224
    },
    "euclideanDistance" : 108.0106248215531,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5473306711777378,
      "MetricsIntensity" : 0.06039961124206069,
      "Density" : 3.1462324393358876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "284ad06d-b989-41da-9358-046bc8ab95aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5485170060418295,
      "MetricsIntensity" : 0.0603763172560708,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 108.0106312305538,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5485170060418295,
      "MetricsIntensity" : 0.0603763172560708,
      "Density" : 3.1475095785440614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b5f56735-6c6f-48bf-8bd5-9951ac1a215e",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5486914446215339,
      "MetricsIntensity" : 0.060376317256070795,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 108.01063211655678,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.5486914446215339,
      "MetricsIntensity" : 0.0603763172560708,
      "Density" : 3.147509578544062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "da776f7c-e158-4596-86fc-c76e229c63bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5484908417299508,
      "MetricsIntensity" : 0.06038065999021918,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 108.01063632609537,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5484908417299508,
      "MetricsIntensity" : 0.06038065999021919,
      "Density" : 3.148148148148148
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7b3ee7b1-5482-4c93-b92d-782018fbe3b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5472299211707753,
      "MetricsIntensity" : 0.060431990300291095,
      "Density" : 1.001013993104847
    },
    "euclideanDistance" : 108.0106378801344,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5472299211707753,
      "MetricsIntensity" : 0.06043199030029109,
      "Density" : 3.147959183673468
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "59a51ea9-15d0-4298-aff7-389cb0434b80",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5511947618825043,
      "MetricsIntensity" : 0.06038204637099034,
      "Density" : 0.9991888055161224
    },
    "euclideanDistance" : 108.01064446165806,
    "generation" : 1,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5511947618825043,
      "MetricsIntensity" : 0.060382046370990344,
      "Density" : 3.148242811501598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerConsumer', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "668d72e3-2de2-4c01-bb2a-b0317a333ecd",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5471482158343718,
      "MetricsIntensity" : 0.06042345938264853,
      "Density" : 0.9991888055161224
    },
    "euclideanDistance" : 109.01052313460687,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875149,
      "LackOfCohesion" : 0.5471482158343718,
      "MetricsIntensity" : 0.06042345938264853,
      "Density" : 3.1462324393358876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "d4138444-7b97-48b5-ba54-126c825dbea4",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5471294862004069,
      "MetricsIntensity" : 0.060422192345753696,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 109.01052489893567,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5471294862004069,
      "MetricsIntensity" : 0.060422192345753696,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "e90aace5-3d21-477d-ba80-a741b483b4e7",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5472325550081929,
      "MetricsIntensity" : 0.060389813287523283,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 109.01052539834988,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875155,
      "LackOfCohesion" : 0.5472325550081929,
      "MetricsIntensity" : 0.06038981328752328,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "346adb89-1fbe-4cc1-9955-a1e348df4b1b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5471411875698867,
      "MetricsIntensity" : 0.06041401229986663,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 109.01052681254733,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875155,
      "LackOfCohesion" : 0.5471411875698867,
      "MetricsIntensity" : 0.06041401229986663,
      "Density" : 3.147509578544062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3eaa9ed4-5b1d-4568-92e6-6e108758113c",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5473246431254911,
      "MetricsIntensity" : 0.060395773930322014,
      "Density" : 0.9991888055161224
    },
    "euclideanDistance" : 109.01052732319083,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.680538555691554,
      "LackOfCohesion" : 0.5473246431254911,
      "MetricsIntensity" : 0.060395773930322014,
      "Density" : 3.1462324393358863
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "53b60df8-21c7-44b4-a4e0-2f09ba71e033",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5485053774587723,
      "MetricsIntensity" : 0.060380659990219174,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 109.01053882773753,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6805385556915544,
      "LackOfCohesion" : 0.5485053774587723,
      "MetricsIntensity" : 0.06038065999021918,
      "Density" : 3.1481481481481484
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "da76c05c-94ed-4c54-9dd5-c6591d5cb9da",
    "objectives" : {
      "NumberOfConcerns" : 0.9960072595281306,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471566621801992,
      "MetricsIntensity" : 0.06041877691553056,
      "Density" : 0.9991888055161224
    },
    "euclideanDistance" : 110.01042423139579,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6793145654834758,
      "LackOfCohesion" : 0.5471566621801992,
      "MetricsIntensity" : 0.060418776915530555,
      "Density" : 3.146232439335887
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "73406a9c-fe6f-4ca1-b864-8e1de64223a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.547099942439356,
      "MetricsIntensity" : 0.06042539613904495,
      "Density" : 0.9989860068951532
    },
    "euclideanDistance" : 110.010425398071,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.547099942439356,
      "MetricsIntensity" : 0.06042539613904495,
      "Density" : 3.1455938697318016
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "46408cb2-f99f-4899-b8a2-3911f26b21fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5470775296280777,
      "MetricsIntensity" : 0.06042539613904495,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 110.01042897051806,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5470775296280777,
      "MetricsIntensity" : 0.06042539613904495,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "283ff4da-8260-4aa5-9a46-8702ade79fdf",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471176865756129,
      "MetricsIntensity" : 0.06042539613904493,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 110.01042917022431,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875149,
      "LackOfCohesion" : 0.5471176865756129,
      "MetricsIntensity" : 0.06042539613904494,
      "Density" : 3.1468710089399745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "78762d89-16a1-4e6e-95f1-b0f2114c062e",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471266518410652,
      "MetricsIntensity" : 0.060422192345753696,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 110.01042921305216,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.5471266518410652,
      "MetricsIntensity" : 0.060422192345753696,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3f833ff8-1eed-47c2-af63-69876dd0fad7",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5472265269559465,
      "MetricsIntensity" : 0.060393017080814536,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 110.01042969379672,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5472265269559465,
      "MetricsIntensity" : 0.060393017080814536,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "78dcde46-81e6-4669-9a71-6edf6dbd25f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471351595176401,
      "MetricsIntensity" : 0.0604172160931579,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 110.01043109514599,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5471351595176401,
      "MetricsIntensity" : 0.060417216093157894,
      "Density" : 3.147509578544062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "19d02138-4b01-4483-9fb6-f875ff36d411",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471351595176402,
      "MetricsIntensity" : 0.06041721609315789,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 110.01043109514599,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.5471351595176402,
      "MetricsIntensity" : 0.060417216093157894,
      "Density" : 3.1475095785440614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "2110fcc2-a9de-4458-b274-eba1abdb670b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471351595176401,
      "MetricsIntensity" : 0.0604172160931579,
      "Density" : 0.9995944027580612
    },
    "euclideanDistance" : 110.01043109514599,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5471351595176401,
      "MetricsIntensity" : 0.0604172160931579,
      "Density" : 3.147509578544062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "642af8f6-43ba-4819-a670-61c03a3707a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5471244714817421,
      "MetricsIntensity" : 0.060418355034015,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 110.01043617359849,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6805385556915542,
      "LackOfCohesion" : 0.5471244714817421,
      "MetricsIntensity" : 0.060418355034015006,
      "Density" : 3.148148148148148
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "1a4581e0-6117-4d0f-bbc7-733d59dd5690",
    "objectives" : {
      "NumberOfConcerns" : 0.9967332123411978,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5484490701690358,
      "MetricsIntensity" : 0.06038753679815725,
      "Density" : 0.9997972013790306
    },
    "euclideanDistance" : 110.01044275239346,
    "generation" : 1,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6805385556915537,
      "LackOfCohesion" : 0.5484490701690358,
      "MetricsIntensity" : 0.06038753679815725,
      "Density" : 3.1461391193363113
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ed7f7328-2113-426a-be85-673314fd255b",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 111.0,
      "LackOfCohesion" : 0.5484668147903499,
      "MetricsIntensity" : 0.06037745619692792,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 111.0103418538544,
    "generation" : 1,
    "numberOfRefactorings" : 111,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875153,
      "LackOfCohesion" : 0.5484668147903499,
      "MetricsIntensity" : 0.06037745619692793,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f0f053b7-a738-4850-97ec-bca0f281fdf0",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 111.0,
      "LackOfCohesion" : 0.5485835083401284,
      "MetricsIntensity" : 0.06037425240363666,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 111.01034242871901,
    "generation" : 1,
    "numberOfRefactorings" : 111,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679926560587515,
      "LackOfCohesion" : 0.5485835083401284,
      "MetricsIntensity" : 0.06037425240363666,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "68544d4a-8959-4e42-bb1e-8c5a20ee8282",
    "objectives" : {
      "NumberOfConcerns" : 0.9963702359346642,
      "NumberOfRefactorings" : 111.0,
      "LackOfCohesion" : 0.5485934832843653,
      "MetricsIntensity" : 0.060373618885189266,
      "Density" : 0.9993916041370918
    },
    "euclideanDistance" : 111.01034247766843,
    "generation" : 1,
    "numberOfRefactorings" : 111,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6799265605875155,
      "LackOfCohesion" : 0.5485934832843653,
      "MetricsIntensity" : 0.060373618885189266,
      "Density" : 3.146871008939974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "50ab999a-fb24-4c89-a7e2-330a4e0a339d",
    "objectives" : {
      "NumberOfConcerns" : 0.9956442831215971,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5494627900156926,
      "MetricsIntensity" : 0.0603699096694883,
      "Density" : 0.9987832082741838
    },
    "euclideanDistance" : 112.01024251968768,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6787025703794372,
      "LackOfCohesion" : 0.5494627900156926,
      "MetricsIntensity" : 0.06036990966948829,
      "Density" : 3.146964856230032
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerConsumer', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7d189b90-1f33-42e7-b1f9-c2132cc6b023",
    "objectives" : {
      "NumberOfConcerns" : 0.9960072595281306,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5494532757204641,
      "MetricsIntensity" : 0.06038243244952374,
      "Density" : 0.9987832082741838
    },
    "euclideanDistance" : 115.00997845099577,
    "generation" : 1,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6793145654834758,
      "LackOfCohesion" : 0.5494532757204641,
      "MetricsIntensity" : 0.06038243244952374,
      "Density" : 3.1469648562300323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.shutwait', targetTypeName='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerConsumer', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setOrganization(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.subscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "07643df9-f0bc-438f-a495-847b7f16aaed",
    "objectives" : {
      "NumberOfConcerns" : 0.9952813067150635,
      "NumberOfRefactorings" : 117.0,
      "LackOfCohesion" : 0.5509960096523269,
      "MetricsIntensity" : 0.06042096011756475,
      "Density" : 0.998377611032245
    },
    "euclideanDistance" : 117.00980552940331,
    "generation" : 1,
    "numberOfRefactorings" : 117,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6780905752753976,
      "LackOfCohesion" : 0.5509960096523269,
      "MetricsIntensity" : 0.060420960117564745,
      "Density" : 3.1456869009584665
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.config.MethodConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MethodConfig.retry, org.apache.dubbo.config.MethodConfig.service, org.apache.dubbo.config.MethodConfig.oninvokeMethod, org.apache.dubbo.config.MethodConfig.onthrowMethod, org.apache.dubbo.config.MethodConfig.onthrow, org.apache.dubbo.config.MethodConfig.arguments, org.apache.dubbo.config.MethodConfig.isReturn, org.apache.dubbo.config.MethodConfig.oninvoke, org.apache.dubbo.config.MethodConfig.name, org.apache.dubbo.config.MethodConfig.parentPrefix, org.apache.dubbo.config.MethodConfig.deprecated, org.apache.dubbo.config.MethodConfig.serviceId, org.apache.dubbo.config.MethodConfig.stat], extractedMethods=[org.apache.dubbo.config.MethodConfig.getService(), org.apache.dubbo.config.MethodConfig.isReturn(), org.apache.dubbo.config.MethodConfig.setService(String), org.apache.dubbo.config.MethodConfig.setReturn(Boolean), org.apache.dubbo.config.MethodConfig.checkDefault(), org.apache.dubbo.config.MethodConfig.setOninvoke(Object), org.apache.dubbo.config.MethodConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.convertMethodConfig2AsyncInfo(), org.apache.dubbo.config.MethodConfig.setServiceId(String), org.apache.dubbo.config.MethodConfig.constructMethodConfig(Method[]), org.apache.dubbo.config.MethodConfig.isRetry(), org.apache.dubbo.config.MethodConfig.refreshArgument(ArgumentConfig, InmemoryConfiguration), org.apache.dubbo.config.MethodConfig.getOnthrowMethod(), org.apache.dubbo.config.MethodConfig.setParentPrefix(String), org.apache.dubbo.config.MethodConfig.setName(String), org.apache.dubbo.config.MethodConfig.getMethodByName(Class<?>, String), org.apache.dubbo.config.MethodConfig.setOninvokeMethod(String), org.apache.dubbo.config.MethodConfig.getExecutes(), org.apache.dubbo.config.MethodConfig.setRetry(Boolean), org.apache.dubbo.config.MethodConfig.getOninvoke(), org.apache.dubbo.config.MethodConfig.setDeprecated(Boolean), org.apache.dubbo.config.MethodConfig.setOnthrowMethod(String), org.apache.dubbo.config.MethodConfig.addArgument(ArgumentConfig), org.apache.dubbo.config.MethodConfig.getName(), org.apache.dubbo.config.MethodConfig.getStat(), org.apache.dubbo.config.MethodConfig.getOninvokeMethod(), org.apache.dubbo.config.MethodConfig.setStat(Integer), org.apache.dubbo.config.MethodConfig.getServiceId(), org.apache.dubbo.config.MethodConfig.getArguments(), org.apache.dubbo.config.MethodConfig.getPrefixes(), org.apache.dubbo.config.MethodConfig.getParentPrefix(), org.apache.dubbo.config.MethodConfig.setOnthrow(Object), org.apache.dubbo.config.MethodConfig.getOnthrow(), org.apache.dubbo.config.MethodConfig.getDeprecated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.ApplicationConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.LoadBalance$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServicePort(Integer)', targetType='org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setDumpDirectory(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.refresh()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIpCompatible()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLogger(String)', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLogger()', targetType='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.logger', targetTypeName='org.apache.dubbo.qos.command.impl.OnlineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataType(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataType()', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataType', targetTypeName='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServicePort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPort()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getArchitecture()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setArchitecture(String)', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.architecture', targetTypeName='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosAcceptForeignIp()', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIp(Boolean)', targetType='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosAcceptForeignIp', targetTypeName='org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getParameters()', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setParameters(Map<String,String>)', targetType='com.alibaba.dubbo.container.page.MenuComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setShutwait(String)', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getShutwait()', targetType='org.apache.dubbo.gen.AbstractGenerator.ServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMetadataServiceProtocol(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getMetadataServiceProtocol()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.metadataServiceProtocol', targetTypeName='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistryIds(String)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistryIds()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registryIds', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterConsumer()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getVersion()', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterConsumer(Boolean)', targetType='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerConsumer', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosPortCompatible()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPortCompatible(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosPort(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnableFileCache()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableFileCache(Boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnableCompatible()', targetType='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.enableFileCache', targetTypeName='org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegistries()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getStartupProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getReadinessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getLivenessProbe()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getName()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.DestinationRuleSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnableEmptyProtection(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnable(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getQosEnable()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRegisterMode(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosEnableCompatible(Boolean)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRegisterMode()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.qosEnable', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.registerMode', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setName(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setLivenessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setReadinessProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setStartupProbe(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setProtocol(String)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.checkDefault()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getHostname()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getProtocol()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getOrganization()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.protocol', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.LOGGER', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.hostname', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.organization', targetTypeName='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.appendEnvironmentProperties()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getEnvironment()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setCompiler(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getRepository()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setQosAcceptForeignIpCompatible(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getDumpDirectory()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.getCompiler()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setRepository(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.ApplicationConfig.setEnvironment(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.environment', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.compiler', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.ApplicationConfig.repository', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListStringMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(ContextRefreshedEvent)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getOrder()', targetType='org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.getApplicationContext()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setBootstrap(DubboBootstrap)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.setApplicationContext(ApplicationContext)', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.initDubboConfigBeans()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unsubscribe(URL, NotifyListener)', targetType='org.apache.dubbo.rpc.protocol.tri.stream.ServerStream.ServerTransportObserver.ServerDecoderListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.unregister(URL)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Parameters",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistry.RegistryChildListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.equals(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toString()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.parseParameters(String)', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.toMap(String...)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameters()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getParameter(String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getDecodedParameter(String, String)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Parameters.logger', targetTypeName='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.<T>getMethodExtension(Class<T>, String, String, String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.hasParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getBooleanParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getPositiveIntParameter(String, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String, boolean)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Parameters.getMethodBooleanParameter(String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersInitialized, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.routerChain, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityExecutor, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.connectivityCheckFuture, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.consumerUrl, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.disabledInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivityPermit, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskPeriod, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.validInvokers, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.invokersToReconnect, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyed, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.logger, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.url, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.reconnectTaskTryCount, org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.queryMap], extractedMethods=[org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getCheckConnectivityPermit(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvoker(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConnectivityCheckFuture(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.checkConnectivity(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getDisabledInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.addRouters(List<Router>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.doList(BitList<Invoker<T>>, Invocation), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokerInternal(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setConsumerUrl(URL), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getValidInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokersToReconnect(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.destroyInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.refreshInvokers(BitList<Invoker<T>>, Collection<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getRouterChain(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getInvokers(), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.removeValidInvoker(Invoker<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setInvokers(BitList<Invoker<T>>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.setRouterChain(RouterChain<T>), org.apache.dubbo.rpc.cluster.directory.AbstractDirectory.getConsumerUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.LOGGER], extractedMethods=[org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.customizeInstance(ServiceInstance, ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.hasEndpoints(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getParams(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.refreshMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataStorageType(URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.isValidInstance(ServiceInstance), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.registerMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.setDefaultParams(Map<String,String>, URL), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.unregisterMetadataAndInstance(ApplicationModel), org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils.getMetadataServiceParameter(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>resolveAnnotationType(AnnotatedElement, String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.utils.AnnotationUtils.<T>getDefaultValue(Class<? extends Annotation>, String)', targetType='org.apache.dubbo.common.utils.MethodUtils'"
      } ]
    } ]
  } ]
}