{
  "executionId" : "3a6795ae-7144-488a-9f75-75f156c5fcb3",
  "computingTime" : 5984883,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 34,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2305716120745043,
    "meanNumConcerns" : 1.7526089625537133,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.5405929317787898
  },
  "population" : [ {
    "solutionId" : "361e22a5-69ca-4019-bd27-4c30df15d7f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.541644085374414,
      "MetricsIntensity" : 0.06068513423126017,
      "Density" : 0.9988071570576541
    },
    "euclideanDistance" : 34.0337182267089,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822412,
      "LackOfCohesion" : 0.541644085374414,
      "MetricsIntensity" : 0.060685134231260165,
      "Density" : 3.220512820512821
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "cfe16707-f6f0-465f-bdd1-e9dfe832df0c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.541692625016114,
      "MetricsIntensity" : 0.06067906833758991,
      "Density" : 0.9982107355864811
    },
    "euclideanDistance" : 35.03272951058651,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747091243110839,
      "LackOfCohesion" : 0.541692625016114,
      "MetricsIntensity" : 0.06067906833758992,
      "Density" : 3.2185897435897433
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "32094f90-3bbc-4b61-8fc0-2afc89801323",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5416211556050222,
      "MetricsIntensity" : 0.0607011643735312,
      "Density" : 0.9986083499005964
    },
    "euclideanDistance" : 35.03273977558698,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7470912431108399,
      "LackOfCohesion" : 0.5416211556050222,
      "MetricsIntensity" : 0.06070116437353121,
      "Density" : 3.2198717948717945
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "8425a4be-e135-40d2-aa43-a53eed85a81a",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5416271113892797,
      "MetricsIntensity" : 0.06069138538465179,
      "Density" : 0.9984095427435388
    },
    "euclideanDistance" : 35.032744177189194,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822414,
      "LackOfCohesion" : 0.5416271113892797,
      "MetricsIntensity" : 0.06069138538465179,
      "Density" : 3.2192307692307693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "cab561b8-ba23-4c3d-a404-bfec2c7aa9e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5415610852408749,
      "MetricsIntensity" : 0.06069405407818185,
      "Density" : 0.9990059642147118
    },
    "euclideanDistance" : 35.0327601637535,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747703612982241,
      "LackOfCohesion" : 0.5415610852408749,
      "MetricsIntensity" : 0.06069405407818185,
      "Density" : 3.221153846153846
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "92fd9653-b7cd-4282-9c36-9f2fe9fe409e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989492119089317,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5422855233389652,
      "MetricsIntensity" : 0.060705867246045715,
      "Density" : 1.001789264413519
    },
    "euclideanDistance" : 35.03283088831687,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746478873239437,
      "LackOfCohesion" : 0.5422855233389652,
      "MetricsIntensity" : 0.06070586724604572,
      "Density" : 3.230128205128205
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "d56b75fe-8252-4f45-85e8-4132d56b4491",
    "objectives" : {
      "NumberOfConcerns" : 0.9989492119089317,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5423035730116644,
      "MetricsIntensity" : 0.06070586724604571,
      "Density" : 1.001789264413519
    },
    "euclideanDistance" : 35.03283116771876,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.746478873239437,
      "LackOfCohesion" : 0.5423035730116644,
      "MetricsIntensity" : 0.06070586724604571,
      "Density" : 3.2301282051282048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "fb6606c0-fe10-4cff-bf28-742bb09e2b59",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5416255069739287,
      "MetricsIntensity" : 0.06069278504909064,
      "Density" : 0.9986083499005964
    },
    "euclideanDistance" : 36.03183120354003,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7470912431108387,
      "LackOfCohesion" : 0.5416255069739287,
      "MetricsIntensity" : 0.06069278504909065,
      "Density" : 3.219871794871795
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "40529ee5-adc7-459b-a9bf-2172b64183f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5425782350403338,
      "MetricsIntensity" : 0.060632288566462356,
      "Density" : 0.9982107355864811
    },
    "euclideanDistance" : 36.03185385305891,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7483159828536436,
      "LackOfCohesion" : 0.5425782350403338,
      "MetricsIntensity" : 0.06063228856646236,
      "Density" : 3.218589743589743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "20972955-a890-4f66-add1-93f6a556cd9f",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5425782350403336,
      "MetricsIntensity" : 0.06063228856646237,
      "Density" : 0.9982107355864811
    },
    "euclideanDistance" : 36.03185385305891,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748315982853644,
      "LackOfCohesion" : 0.5425782350403336,
      "MetricsIntensity" : 0.06063228856646237,
      "Density" : 3.2185897435897437
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "062e4d60-dc45-4bb7-bbc9-926e980b19fb",
    "objectives" : {
      "NumberOfConcerns" : 1.0003502626970229,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.542497548344081,
      "MetricsIntensity" : 0.06062366453919256,
      "Density" : 0.9984095427435388
    },
    "euclideanDistance" : 36.031867854467116,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7489283527250463,
      "LackOfCohesion" : 0.542497548344081,
      "MetricsIntensity" : 0.060623664539192566,
      "Density" : 3.2192307692307693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "52e2422b-f027-4d8b-9de7-2f1d146887e5",
    "objectives" : {
      "NumberOfConcerns" : 1.0003502626970229,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5423910073714885,
      "MetricsIntensity" : 0.06062099584566251,
      "Density" : 0.9986083499005964
    },
    "euclideanDistance" : 36.03187175535825,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7489283527250463,
      "LackOfCohesion" : 0.5423910073714885,
      "MetricsIntensity" : 0.0606209958456625,
      "Density" : 3.2198717948717954
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "5e3a23d9-03fb-45b9-90c9-a63047cd8967",
    "objectives" : {
      "NumberOfConcerns" : 0.998598949211909,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5418875614812663,
      "MetricsIntensity" : 0.060674946790800544,
      "Density" : 1.0007952286282307
    },
    "euclideanDistance" : 36.0318763670374,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.745866503368034,
      "LackOfCohesion" : 0.5418875614812663,
      "MetricsIntensity" : 0.06067494679080055,
      "Density" : 3.2269230769230766
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.getInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "d76f8066-5d0a-4f2e-90ac-16cf803ee59e",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5424936641369564,
      "MetricsIntensity" : 0.06063248597749914,
      "Density" : 0.9976143141153081
    },
    "euclideanDistance" : 37.03096690056854,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822414,
      "LackOfCohesion" : 0.5424936641369564,
      "MetricsIntensity" : 0.06063248597749914,
      "Density" : 3.2166666666666655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "229524e7-e5a0-433b-8cca-6cc8625eb8b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5425168669448027,
      "MetricsIntensity" : 0.0606305824338623,
      "Density" : 0.9980119284294234
    },
    "euclideanDistance" : 37.030977951237304,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822412,
      "LackOfCohesion" : 0.5425168669448027,
      "MetricsIntensity" : 0.0606305824338623,
      "Density" : 3.217948717948717
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "f41adbe2-97ee-4a69-bc99-6d65651c86ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5425168669448028,
      "MetricsIntensity" : 0.06063058243386229,
      "Density" : 0.9980119284294234
    },
    "euclideanDistance" : 37.030977951237304,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822414,
      "LackOfCohesion" : 0.5425168669448028,
      "MetricsIntensity" : 0.060630582433862296,
      "Density" : 3.217948717948718
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "f54480ea-62dc-4595-8b6e-c1c297d1efcc",
    "objectives" : {
      "NumberOfConcerns" : 0.9978984238178634,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5425169981292008,
      "MetricsIntensity" : 0.06073318632683281,
      "Density" : 1.0003976143141153
    },
    "euclideanDistance" : 37.030995258893114,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7446417636252296,
      "LackOfCohesion" : 0.5425169981292008,
      "MetricsIntensity" : 0.06073318632683281,
      "Density" : 3.225641025641026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "0bf5b9f8-c89e-49f9-91cc-bf70ca73d236",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5423858396911342,
      "MetricsIntensity" : 0.060643793830611754,
      "Density" : 0.9984095427435388
    },
    "euclideanDistance" : 37.030996228617305,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7483159828536436,
      "LackOfCohesion" : 0.5423858396911342,
      "MetricsIntensity" : 0.06064379383061177,
      "Density" : 3.2192307692307693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "9b0eb9da-9144-42c3-8589-911fd5fdc012",
    "objectives" : {
      "NumberOfConcerns" : 1.0003502626970229,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.542474618574689,
      "MetricsIntensity" : 0.06063230369877511,
      "Density" : 0.9984095427435388
    },
    "euclideanDistance" : 37.03100697052632,
    "generation" : 1,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7489283527250465,
      "LackOfCohesion" : 0.542474618574689,
      "MetricsIntensity" : 0.06063230369877513,
      "Density" : 3.2192307692307693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "d6102b8a-bdcc-431e-96cd-83ad13d38076",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5424919823783612,
      "MetricsIntensity" : 0.060633368175871276,
      "Density" : 0.9976143141153081
    },
    "euclideanDistance" : 38.030143409090066,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7470912431108392,
      "LackOfCohesion" : 0.5424919823783612,
      "MetricsIntensity" : 0.06063336817587127,
      "Density" : 3.2166666666666655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "c7223130-80e1-47f7-85b6-46e2de46c19f",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5423777850664229,
      "MetricsIntensity" : 0.060625375682149776,
      "Density" : 0.9978131212723658
    },
    "euclideanDistance" : 38.03015618848,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747703612982241,
      "LackOfCohesion" : 0.5423777850664229,
      "MetricsIntensity" : 0.060625375682149776,
      "Density" : 3.2173076923076924
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "ad8be228-e6f4-4832-abf4-dd2ab88a76ad",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5424125791553381,
      "MetricsIntensity" : 0.060624741167604156,
      "Density" : 0.9978131212723658
    },
    "euclideanDistance" : 38.03015668371011,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822412,
      "LackOfCohesion" : 0.5424125791553381,
      "MetricsIntensity" : 0.060624741167604156,
      "Density" : 3.217307692307693
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "a4ef9bf9-1f58-4e27-8e03-1f3764afd740",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5423047547095158,
      "MetricsIntensity" : 0.060622072474074105,
      "Density" : 0.9980119284294234
    },
    "euclideanDistance" : 38.03016035844747,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822412,
      "LackOfCohesion" : 0.5423047547095158,
      "MetricsIntensity" : 0.06062207247407411,
      "Density" : 3.21794871794872
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "64436358-9207-469b-976a-e20033d1a17c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5424503754785118,
      "MetricsIntensity" : 0.06064314716475071,
      "Density" : 0.9980119284294234
    },
    "euclideanDistance" : 39.02938069263193,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747091243110839,
      "LackOfCohesion" : 0.5424503754785118,
      "MetricsIntensity" : 0.0606431471647507,
      "Density" : 3.217948717948719
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "a2c9c32a-ea57-451b-8b4e-f5e700766bbd",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5424274457091199,
      "MetricsIntensity" : 0.060651151809787654,
      "Density" : 0.9980119284294234
    },
    "euclideanDistance" : 40.02864640910693,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.74709124311084,
      "LackOfCohesion" : 0.5424274457091199,
      "MetricsIntensity" : 0.060651151809787654,
      "Density" : 3.217948717948719
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "cccb0990-61ee-47ef-ba34-a2a6fbdcacd5",
    "objectives" : {
      "NumberOfConcerns" : 0.9996497373029772,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.542242915660203,
      "MetricsIntensity" : 0.060639856107990456,
      "Density" : 0.9984095427435388
    },
    "euclideanDistance" : 40.02866255302647,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822414,
      "LackOfCohesion" : 0.542242915660203,
      "MetricsIntensity" : 0.06063985610799046,
      "Density" : 3.21923076923077
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String), org.apache.dubbo.common.utils.SerializeClassChecker.SerializeClassChecker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setObjectAttachments(Map<String,Object>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "e9a4c233-be57-4552-8124-da2ef3f709e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9982486865148862,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5421206176956771,
      "MetricsIntensity" : 0.060650374592640034,
      "Density" : 0.9962226640159045
    },
    "euclideanDistance" : 41.027875076202726,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7452541334966316,
      "LackOfCohesion" : 0.5421206176956771,
      "MetricsIntensity" : 0.06065037459264004,
      "Density" : 3.2163029525032085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_METHOD_NAME', targetTypeName='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMethodConfig(MethodConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMock(Class<?>, AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMultiName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.service.GenericServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "01d547e2-956c-4eb0-9adc-46b383384571",
    "objectives" : {
      "NumberOfConcerns" : 0.9978984238178634,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5432587924477214,
      "MetricsIntensity" : 0.06067390406519676,
      "Density" : 0.9960238568588469
    },
    "euclideanDistance" : 41.027876818401126,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.74464176362523,
      "LackOfCohesion" : 0.5432587924477214,
      "MetricsIntensity" : 0.060673904065196765,
      "Density" : 3.21566110397946
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMethodConfig(MethodConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMock(Class<?>, AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMultiName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.service.GenericServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "ba417dc1-c7fa-41a6-af21-12a394b4ea81",
    "objectives" : {
      "NumberOfConcerns" : 0.9978984238178634,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5431121147165308,
      "MetricsIntensity" : 0.06068114499589374,
      "Density" : 0.9974155069582505
    },
    "euclideanDistance" : 41.02790869552443,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7446417636252296,
      "LackOfCohesion" : 0.5431121147165308,
      "MetricsIntensity" : 0.06068114499589375,
      "Density" : 3.2160256410256407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_METHOD_NAME', targetTypeName='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMethodConfig(MethodConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMock(Class<?>, AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkLength(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMultiName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.service.GenericServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "c5274c13-8bb2-43f7-ba1a-8a232138fb36",
    "objectives" : {
      "NumberOfConcerns" : 0.998598949211909,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5410167654927825,
      "MetricsIntensity" : 0.060626364817490154,
      "Density" : 1.001789264413519
    },
    "euclideanDistance" : 41.02800453700273,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.745866503368034,
      "LackOfCohesion" : 0.5410167654927825,
      "MetricsIntensity" : 0.06062636481749015,
      "Density" : 3.230128205128205
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMethodName(String, String)', targetType='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkLength(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getCodec()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "8dae1101-01f3-4c93-a180-da4ca4b196c3",
    "objectives" : {
      "NumberOfConcerns" : 0.998598949211909,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5410368988283293,
      "MetricsIntensity" : 0.060623696123960076,
      "Density" : 1.001789264413519
    },
    "euclideanDistance" : 41.028004798552985,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.745866503368034,
      "LackOfCohesion" : 0.5410368988283293,
      "MetricsIntensity" : 0.060623696123960076,
      "Density" : 3.230128205128205
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMethodName(String, String)', targetType='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkLength(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getCodec()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "e5253f2a-01d5-4793-b33c-0753879ce85e",
    "objectives" : {
      "NumberOfConcerns" : 0.9975481611208407,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.542746330300039,
      "MetricsIntensity" : 0.060670190969987596,
      "Density" : 0.9962226640159045
    },
    "euclideanDistance" : 42.02720329002611,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7440293937538276,
      "LackOfCohesion" : 0.542746330300039,
      "MetricsIntensity" : 0.060670190969987596,
      "Density" : 3.216302952503209
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_METHOD_NAME', targetTypeName='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMethodConfig(MethodConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMock(Class<?>, AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMultiName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.service.GenericServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "6a527707-5efc-4e64-8de3-29b13171f479",
    "objectives" : {
      "NumberOfConcerns" : 0.9992994746059545,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5415801480986873,
      "MetricsIntensity" : 0.06061077905636384,
      "Density" : 1.001789264413519
    },
    "euclideanDistance" : 43.026726158210025,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.747091243110839,
      "LackOfCohesion" : 0.5415801480986873,
      "MetricsIntensity" : 0.06061077905636384,
      "Density" : 3.2301282051282048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMethodName(String, String)', targetType='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkLength(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConsumerConfig(ConsumerConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get()', targetType='com.alibaba.dubbo.container.page.pages.HomePageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.reset(org.apache.dubbo.common.Parameters)', targetType='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getCodec()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  }, {
    "solutionId" : "7a8bef19-89ea-4be5-a00f-9f6afb4c3a6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9982486865148862,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5432668235066288,
      "MetricsIntensity" : 0.06063794173234075,
      "Density" : 0.9982107355864811
    },
    "euclideanDistance" : 49.02337953379254,
    "generation" : 1,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7452541334966318,
      "LackOfCohesion" : 0.5432668235066288,
      "MetricsIntensity" : 0.060637941732340744,
      "Density" : 3.218589743589743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.ADDRESS_CONSUMPTION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.REGISTRATION_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.MIGRATION_STEP_STATUS, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportConsumptionStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportRegistrationStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reportMigrationStepStatus(Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.ConfigValidationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.isValidRegisterMode(String)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkNameHasSymbol(String, String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME_HAS_SYMBOL', targetTypeName='org.apache.dubbo.registry.integration.RegistryProtocol.ProviderConfigurationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMethodName(String, String)', targetType='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_METHOD_NAME', targetTypeName='org.apache.dubbo.rpc.model.ReflectionServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkHost(String, String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_END_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.IPV6_START_MARK', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateModuleConfig(ModuleConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(String, String, int, Pattern)', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMethodConfig(MethodConfig)', targetType='org.apache.dubbo.rpc.service.GenericException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathName(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkPathLength(String, String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.MAX_PATH_LENGTH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_PATH', targetTypeName='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateSslConfig(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkLength(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkParameterName(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkMultiName(String, String)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_MULTI_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.utils.ConfigValidationUtils.PATTERN_NAME', targetTypeName='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProtocolConfig(ProtocolConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateReferenceConfig(ReferenceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateConfigCenterConfig(ConfigCenterConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(MonitorConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateProviderConfig(ProviderConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateMetricsConfig(MetricsConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.checkExtension(ScopeModel, Class<?>, String, String)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateAbstractInterfaceConfig(AbstractInterfaceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.utils.ConfigValidationUtils.validateServiceConfig(ServiceConfig)', targetType='org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration.NacosConfigListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.SerializeClassChecker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_ALLOW_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CLASS_BLOCK_LFU_CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.CACHE, org.apache.dubbo.common.utils.SerializeClassChecker.counter], extractedMethods=[org.apache.dubbo.common.utils.SerializeClassChecker.validateClass(String), org.apache.dubbo.common.utils.SerializeClassChecker.error(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.service.GenericServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachment(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.AsyncRpcResult",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.AsyncRpcResult.newDefaultAsyncResult(Object, Throwable, Invocation)', targetType='org.apache.dubbo.rpc.AppResponse'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.utils.AnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.utils.AnnotationUtils.isAllAnnotationPresent(Class<?>, Class<? extends Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAttributes(Annotation, boolean), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllMetaAnnotations(Class<? extends Annotation>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.getAllDeclaredAnnotations(Class<?>, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, Class<? extends Annotation>), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotations(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.getDeclaredAnnotations(AnnotatedElement, Predicate<Annotation>...), org.apache.dubbo.common.utils.AnnotationUtils.isAnnotationPresent(AnnotatedElement, String), org.apache.dubbo.common.utils.AnnotationUtils.<A extends Annotation>findMetaAnnotation(AnnotatedElement, Class<A>), org.apache.dubbo.common.utils.AnnotationUtils.isAnyAnnotationPresent(Class<?>, Class<? extends Annotation>...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.utils.CompositeReferenceCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.utils.CompositeReferenceCache.destroy(String, Class<?>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>get(ReferenceConfigBase<T>), org.apache.dubbo.config.utils.CompositeReferenceCache.<T>destroy(ReferenceConfigBase<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.AbstractEndpoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.AbstractEndpoint.getChannelCodec(URL)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      } ]
    } ]
  } ]
}