{
  "executionId" : "c6741ec0-c25e-4e39-8ca4-0ebe96a7e3aa",
  "computingTime" : 860103,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.297557840616966,
    "meanNumConcerns" : 1.7906691221608346,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "dd555739-b85c-4b33-a7fa-70f096807ca8",
    "objectives" : {
      "NumberOfConcerns" : 1.0044566335275968,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5457743692324277,
      "MetricsIntensity" : 0.06046899608509106,
      "Density" : 0.999415318651335
    },
    "euclideanDistance" : 10.114805498347021,
    "generation" : 4,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7876754118364857,
      "LackOfCohesion" : 0.5457743692324277,
      "MetricsIntensity" : 0.06046899608509106,
      "Density" : 3.2766773162939296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort(), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "27393ac3-e7b4-4322-bd50-19cd29f139fd",
    "objectives" : {
      "NumberOfConcerns" : 1.0047994514912582,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5454167201508874,
      "MetricsIntensity" : 0.06039483494024899,
      "Density" : 1.0
    },
    "euclideanDistance" : 10.114877600466787,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7882855399633921,
      "LackOfCohesion" : 0.5454167201508874,
      "MetricsIntensity" : 0.060394834940248984,
      "Density" : 3.2785942492012787
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "0240a9a5-5aca-4f6f-85c6-2122b3f7cbf7",
    "objectives" : {
      "NumberOfConcerns" : 1.0054850874185808,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5444386903166082,
      "MetricsIntensity" : 0.06042967371912846,
      "Density" : 1.0
    },
    "euclideanDistance" : 10.114893251735316,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7895057962172052,
      "LackOfCohesion" : 0.5444386903166082,
      "MetricsIntensity" : 0.06042967371912847,
      "Density" : 3.2785942492012783
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "d5aefbeb-38f8-4b10-844c-db7a281588f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0051422694549195,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5440210180034325,
      "MetricsIntensity" : 0.06045122891370337,
      "Density" : 1.0021438316117717
    },
    "euclideanDistance" : 10.115049009282613,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.788895668090299,
      "LackOfCohesion" : 0.5440210180034325,
      "MetricsIntensity" : 0.06045122891370338,
      "Density" : 3.2856230031948876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort(), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "cb0f76b2-e89e-47b4-8dbd-257a674c533d",
    "objectives" : {
      "NumberOfConcerns" : 1.0061707233459034,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5428682400432969,
      "MetricsIntensity" : 0.06050200613746957,
      "Density" : 1.0025336191775482
    },
    "euclideanDistance" : 11.104765625662436,
    "generation" : 25,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.791819291819292,
      "LackOfCohesion" : 0.5428682400432969,
      "MetricsIntensity" : 0.06050200613746957,
      "Density" : 3.291106845809341
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "6b847a04-f572-49dd-8077-0939328ab951",
    "objectives" : {
      "NumberOfConcerns" : 1.0071991772368871,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5429008430688578,
      "MetricsIntensity" : 0.06049705035967613,
      "Density" : 1.0027285129604366
    },
    "euclideanDistance" : 11.104878021474958,
    "generation" : 27,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7936507936507935,
      "LackOfCohesion" : 0.5429008430688578,
      "MetricsIntensity" : 0.06049705035967613,
      "Density" : 3.2896419437340154
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "dc12346b-cfcb-49c4-a699-150df146b2e7",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5441603870661751,
      "MetricsIntensity" : 0.06050188247689061,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 13.088382966498688,
    "generation" : 44,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7875457875457874,
      "LackOfCohesion" : 0.5441603870661751,
      "MetricsIntensity" : 0.06050188247689061,
      "Density" : 3.278132992327366
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort(), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "041da4be-b78d-405b-9255-226428592458",
    "objectives" : {
      "NumberOfConcerns" : 1.0047994514912582,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5440079681778208,
      "MetricsIntensity" : 0.06041086001171947,
      "Density" : 0.9998051062171117
    },
    "euclideanDistance" : 13.088499773831348,
    "generation" : 46,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7893772893772892,
      "LackOfCohesion" : 0.5440079681778208,
      "MetricsIntensity" : 0.06041086001171947,
      "Density" : 3.280051150895141
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "965d26d3-24ad-4404-a4be-45257b497f9c",
    "objectives" : {
      "NumberOfConcerns" : 1.0041138155639355,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5430447694520526,
      "MetricsIntensity" : 0.060487778285269966,
      "Density" : 1.0017540440459949
    },
    "euclideanDistance" : 13.088556532800704,
    "generation" : 24,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7881562881562882,
      "LackOfCohesion" : 0.5430447694520526,
      "MetricsIntensity" : 0.06048777828526997,
      "Density" : 3.2864450127877243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "07e38309-19ab-47d8-b16b-529cf80590d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0054850874185808,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5448810788700124,
      "MetricsIntensity" : 0.06040357112706219,
      "Density" : 0.9996102124342233
    },
    "euclideanDistance" : 13.088573826790272,
    "generation" : 41,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.790598290598291,
      "LackOfCohesion" : 0.5448810788700124,
      "MetricsIntensity" : 0.06040357112706219,
      "Density" : 3.277316293929711
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "978131a5-e00a-4273-bd5c-159ce20e726f",
    "objectives" : {
      "NumberOfConcerns" : 1.0065135413095647,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5423358691521561,
      "MetricsIntensity" : 0.06038140108025781,
      "Density" : 1.0007795751315534
    },
    "euclideanDistance" : 13.088636421545427,
    "generation" : 37,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.792429792429792,
      "LackOfCohesion" : 0.5423358691521561,
      "MetricsIntensity" : 0.060381401080257815,
      "Density" : 3.28115015974441
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "e2f29e44-e080-4b3e-b174-187a3618ff08",
    "objectives" : {
      "NumberOfConcerns" : 1.005827905382242,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5419292889141932,
      "MetricsIntensity" : 0.060499085416530006,
      "Density" : 1.0023387253946598
    },
    "euclideanDistance" : 14.082390428801165,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.792302993280391,
      "LackOfCohesion" : 0.5419292889141932,
      "MetricsIntensity" : 0.06049908541653001,
      "Density" : 3.292573623559538
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "6d10b838-6dd9-4403-a874-5088c031ea77",
    "objectives" : {
      "NumberOfConcerns" : 1.0068563592732258,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5419619174707059,
      "MetricsIntensity" : 0.06049412428403526,
      "Density" : 1.0025336191775482
    },
    "euclideanDistance" : 14.082479030513468,
    "generation" : 26,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7941356139279168,
      "LackOfCohesion" : 0.5419619174707059,
      "MetricsIntensity" : 0.06049412428403526,
      "Density" : 3.2911068458093413
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "25150102-f700-4501-93eb-5bc0f2971190",
    "objectives" : {
      "NumberOfConcerns" : 1.0041138155639355,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5426757825394398,
      "MetricsIntensity" : 0.06046394266982857,
      "Density" : 1.00116936269733
    },
    "euclideanDistance" : 16.071986110643827,
    "generation" : 40,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7892486255345144,
      "LackOfCohesion" : 0.5426757825394398,
      "MetricsIntensity" : 0.06046394266982856,
      "Density" : 3.2866282789507353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "50e41708-c0f2-45eb-971e-612d921f6bce",
    "objectives" : {
      "NumberOfConcerns" : 1.0051422694549195,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5422507701256446,
      "MetricsIntensity" : 0.06042827049185987,
      "Density" : 1.0003897875657766
    },
    "euclideanDistance" : 16.071987375010206,
    "generation" : 38,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7910812461820405,
      "LackOfCohesion" : 0.5422507701256446,
      "MetricsIntensity" : 0.06042827049185988,
      "Density" : 3.2819693094629154
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b3b6b603-1ccc-4d7c-b2c1-e86f676229a5",
    "objectives" : {
      "NumberOfConcerns" : 1.0044566335275968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5419039689111904,
      "MetricsIntensity" : 0.06051326904377032,
      "Density" : 1.0
    },
    "euclideanDistance" : 17.06769623868112,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.790953545232274,
      "LackOfCohesion" : 0.5419039689111904,
      "MetricsIntensity" : 0.06051326904377032,
      "Density" : 3.2869955156950668
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2afc1734-c8a2-4a07-8c22-1874f6407a7b",
    "objectives" : {
      "NumberOfConcerns" : 1.0044566335275968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5416129394791016,
      "MetricsIntensity" : 0.06060609338206495,
      "Density" : 1.0019489378288833
    },
    "euclideanDistance" : 17.067801629894234,
    "generation" : 47,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.790953545232274,
      "LackOfCohesion" : 0.5416129394791016,
      "MetricsIntensity" : 0.060606093382064956,
      "Density" : 3.2912932138284257
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "15430dfe-720c-406b-9785-89c005757319",
    "objectives" : {
      "NumberOfConcerns" : 1.0030853616729516,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5418092224860227,
      "MetricsIntensity" : 0.0604804481951694,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 19.060478399517198,
    "generation" : 46,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7885085574572126,
      "LackOfCohesion" : 0.5418092224860227,
      "MetricsIntensity" : 0.06048044819516939,
      "Density" : 3.282330345710628
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "1b680c49-c9a9-4af0-ab12-b2874d7ef67f",
    "objectives" : {
      "NumberOfConcerns" : 1.002399725745629,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5434457911594245,
      "MetricsIntensity" : 0.0606261169507334,
      "Density" : 0.9982459559540051
    },
    "euclideanDistance" : 20.0574252847353,
    "generation" : 43,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7883792048929665,
      "LackOfCohesion" : 0.5434457911594245,
      "MetricsIntensity" : 0.0606261169507334,
      "Density" : 3.28122998078155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "371d5992-10be-4d76-becc-85e7c79c7bd9",
    "objectives" : {
      "NumberOfConcerns" : 1.0027425437092903,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5434498271694824,
      "MetricsIntensity" : 0.06056151783874899,
      "Density" : 0.9990255310855584
    },
    "euclideanDistance" : 21.054751246044653,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7868051313378126,
      "LackOfCohesion" : 0.5434498271694824,
      "MetricsIntensity" : 0.060561517838748996,
      "Density" : 3.279590531030071
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort(), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b73f971e-355c-46d8-9fc5-c564182a1bba",
    "objectives" : {
      "NumberOfConcerns" : 1.002399725745629,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5423138303086462,
      "MetricsIntensity" : 0.06054680566072266,
      "Density" : 0.999415318651335
    },
    "euclideanDistance" : 22.05224266136099,
    "generation" : 46,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7883792048929665,
      "LackOfCohesion" : 0.5423138303086462,
      "MetricsIntensity" : 0.06054680566072265,
      "Density" : 3.2829705505761857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "7febca5f-0268-4200-9b78-751ba352abcf",
    "objectives" : {
      "NumberOfConcerns" : 1.0017140898183066,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5426549986766266,
      "MetricsIntensity" : 0.06058263537133254,
      "Density" : 0.9980510621711167
    },
    "euclideanDistance" : 24.047820727536596,
    "generation" : 46,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7860635696821516,
      "LackOfCohesion" : 0.5426549986766266,
      "MetricsIntensity" : 0.060582635371332544,
      "Density" : 3.278489116517286
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "07090a93-9250-4a82-9fb6-9c7bb35d6361",
    "objectives" : {
      "NumberOfConcerns" : 1.003428179636613,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5412974361129049,
      "MetricsIntensity" : 0.06068259443565331,
      "Density" : 0.9982459559540051
    },
    "euclideanDistance" : 25.045958723751767,
    "generation" : 45,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7902140672782874,
      "LackOfCohesion" : 0.5412974361129049,
      "MetricsIntensity" : 0.060682594435653305,
      "Density" : 3.2812299807815504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "f2660ebf-27d6-4671-bf7c-b69b3624800a",
    "objectives" : {
      "NumberOfConcerns" : 1.003428179636613,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5410727359764399,
      "MetricsIntensity" : 0.06067640805793804,
      "Density" : 0.9984408497368934
    },
    "euclideanDistance" : 25.045961622070415,
    "generation" : 48,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7902140672782874,
      "LackOfCohesion" : 0.5410727359764399,
      "MetricsIntensity" : 0.06067640805793804,
      "Density" : 3.2818705957719407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "8b96099e-31fe-42b0-ac53-4554e2b7e4e8",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.542632862428688,
      "MetricsIntensity" : 0.06062974466638473,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 26.044101348752033,
    "generation" : 38,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7864137086903304,
      "LackOfCohesion" : 0.542632862428688,
      "MetricsIntensity" : 0.06062974466638473,
      "Density" : 3.279948750800768
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "593977f7-981a-4b1e-a91c-3e9f4645cfff",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5411699356382534,
      "MetricsIntensity" : 0.060654716759873654,
      "Density" : 0.9972714870395635
    },
    "euclideanDistance" : 27.042432440116503,
    "generation" : 49,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7859327217125385,
      "LackOfCohesion" : 0.5411699356382534,
      "MetricsIntensity" : 0.06065471675987365,
      "Density" : 3.2780269058295968
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "148a0b2c-8bb1-4413-a44f-c32dde0c63cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0020569077819679,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.541046703891064,
      "MetricsIntensity" : 0.0606907560812991,
      "Density" : 0.9988306373026701
    },
    "euclideanDistance" : 28.041009175707515,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7888616891064877,
      "LackOfCohesion" : 0.541046703891064,
      "MetricsIntensity" : 0.06069075608129909,
      "Density" : 3.2852564102564115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "7acee3b9-8ca0-42fb-b7a5-44dc68b79492",
    "objectives" : {
      "NumberOfConcerns" : 1.0027425437092903,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5416610778158775,
      "MetricsIntensity" : 0.06062811383022829,
      "Density" : 0.9986357435197817
    },
    "euclideanDistance" : 29.03962531522415,
    "generation" : 34,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7900856793145659,
      "LackOfCohesion" : 0.5416610778158775,
      "MetricsIntensity" : 0.06062811383022829,
      "Density" : 3.2867222578576
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ccab137-9c7e-4f2b-a074-92a487150a25",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5406359009156315,
      "MetricsIntensity" : 0.0607382950609552,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 31.036973937807396,
    "generation" : 46,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7881200244947948,
      "LackOfCohesion" : 0.5406359009156315,
      "MetricsIntensity" : 0.060738295060955204,
      "Density" : 3.284156510583706
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6644fff-68ed-45c0-9685-4e2d9705f875",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5405755947779556,
      "MetricsIntensity" : 0.06077118419200904,
      "Density" : 0.9984408497368934
    },
    "euclideanDistance" : 31.03699175510443,
    "generation" : 43,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7881200244947948,
      "LackOfCohesion" : 0.5405755947779556,
      "MetricsIntensity" : 0.060771184192009046,
      "Density" : 3.286080821039127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "56098b17-0d68-482b-b662-5357c7cb6671",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5408725262299202,
      "MetricsIntensity" : 0.060816004778247876,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 35.032775637779444,
    "generation" : 49,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7879901960784312,
      "LackOfCohesion" : 0.5408725262299202,
      "MetricsIntensity" : 0.060816004778247876,
      "Density" : 3.290757381258023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "14b2a649-7c4d-47a5-ab31-24b10f6186e2",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5443963147147622,
      "MetricsIntensity" : 0.060671312627902374,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 48.02390730969288,
    "generation" : 43,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7836185819070904,
      "LackOfCohesion" : 0.5443963147147622,
      "MetricsIntensity" : 0.060671312627902374,
      "Density" : 3.2765685019206146
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "78fa2469-29ca-4071-9050-b50ec2df3e30",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5446854714316198,
      "MetricsIntensity" : 0.06074207268699,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 52.02204782077043,
    "generation" : 45,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7834862385321106,
      "LackOfCohesion" : 0.5446854714316198,
      "MetricsIntensity" : 0.06074207268699,
      "Density" : 3.2767456758488147
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c08576b-2a65-4b5d-9c58-674c27034df9",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5486695726336075,
      "MetricsIntensity" : 0.05966058038648968,
      "Density" : 0.9984408497368934
    },
    "euclideanDistance" : 53.021778902926606,
    "generation" : 46,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7886377519853394,
      "LackOfCohesion" : 0.5486695726336075,
      "MetricsIntensity" : 0.05966058038648968,
      "Density" : 3.283974358974359
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "e5840953-8b72-467c-979a-dfd604523b55",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.542265932149748,
      "MetricsIntensity" : 0.06086948631534461,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 56.02049190586071,
    "generation" : 48,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.786764705882353,
      "LackOfCohesion" : 0.542265932149748,
      "MetricsIntensity" : 0.060869486315344605,
      "Density" : 3.2907573812580226
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "6616fefd-3051-4003-a317-61ec37ec0b89",
    "objectives" : {
      "NumberOfConcerns" : 1.003428179636613,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5477344321482822,
      "MetricsIntensity" : 0.05965726641517013,
      "Density" : 0.9982459559540051
    },
    "euclideanDistance" : 56.02059384813646,
    "generation" : 27,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.789119804400978,
      "LackOfCohesion" : 0.5477344321482822,
      "MetricsIntensity" : 0.059657266415170135,
      "Density" : 3.285439384220654
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "9ebc2c6a-e5a9-4236-8e1d-ef34aaa77fee",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5454075404489066,
      "MetricsIntensity" : 0.060736481073483214,
      "Density" : 0.9980510621711167
    },
    "euclideanDistance" : 57.020135859415966,
    "generation" : 45,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7828746177370032,
      "LackOfCohesion" : 0.5454075404489066,
      "MetricsIntensity" : 0.060736481073483214,
      "Density" : 3.28058936579116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "fcd15d1d-35f9-45c3-a58f-cfa89af2d1bc",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5476006905548089,
      "MetricsIntensity" : 0.059697200698982135,
      "Density" : 0.9970765932566751
    },
    "euclideanDistance" : 58.019821181820156,
    "generation" : 48,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7848410757946214,
      "LackOfCohesion" : 0.5476006905548089,
      "MetricsIntensity" : 0.059697200698982135,
      "Density" : 3.27948717948718
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "5e9ebc67-fa36-4a3d-b48f-0ff78a53c78e",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.543268177049669,
      "MetricsIntensity" : 0.060858282513077865,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 60.01908420970354,
    "generation" : 42,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7850581751377832,
      "LackOfCohesion" : 0.543268177049669,
      "MetricsIntensity" : 0.06085828251307786,
      "Density" : 3.279666452854394
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "e5ba3787-2a73-4206-847b-9dd94a7d0418",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5418404471107607,
      "MetricsIntensity" : 0.0608978356213327,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 63.018152583868115,
    "generation" : 29,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.784926470588235,
      "LackOfCohesion" : 0.5418404471107607,
      "MetricsIntensity" : 0.060897835621332705,
      "Density" : 3.281771501925545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ea8b055-f054-4952-b67f-b020a3d58646",
    "objectives" : {
      "NumberOfConcerns" : 1.0017140898183066,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5476312855115484,
      "MetricsIntensity" : 0.05974755650171499,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 63.01825358974777,
    "generation" : 47,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7882496940024477,
      "LackOfCohesion" : 0.5476312855115484,
      "MetricsIntensity" : 0.059747556501714996,
      "Density" : 3.2845215157353884
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "abab212c-3026-4795-adec-0c44bfc9809b",
    "objectives" : {
      "NumberOfConcerns" : 0.9989715461090161,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5480893322500388,
      "MetricsIntensity" : 0.05977626782309015,
      "Density" : 0.9962970181251218
    },
    "euclideanDistance" : 64.01792348254185,
    "generation" : 44,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7833537331701348,
      "LackOfCohesion" : 0.5480893322500388,
      "MetricsIntensity" : 0.05977626782309016,
      "Density" : 3.2790250160359204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "eb253859-a7c8-4c12-bebc-cb05794d092f",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5425276391117309,
      "MetricsIntensity" : 0.06085655760481144,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 64.01793874545851,
    "generation" : 27,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7873774509803924,
      "LackOfCohesion" : 0.5425276391117309,
      "MetricsIntensity" : 0.060856557604811436,
      "Density" : 3.290757381258023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "8af1f5bd-23a3-4eb0-9120-fd3dcb241cbe",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.546974309403182,
      "MetricsIntensity" : 0.05978464004658105,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 65.01767375078126,
    "generation" : 46,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7875076546233921,
      "LackOfCohesion" : 0.546974309403182,
      "MetricsIntensity" : 0.05978464004658105,
      "Density" : 3.285163776493256
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ad859922-c603-422e-a6f1-8a79db3a7f25",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5421386073461912,
      "MetricsIntensity" : 0.06094279111867736,
      "Density" : 0.9959072305593452
    },
    "euclideanDistance" : 67.01705268004966,
    "generation" : 18,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7847946045370942,
      "LackOfCohesion" : 0.5421386073461912,
      "MetricsIntensity" : 0.06094279111867737,
      "Density" : 3.281952472703918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c09ffe1-5618-4b53-b688-f0bb6a6e3241",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5420782063129407,
      "MetricsIntensity" : 0.060975732002887896,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 67.0170609126322,
    "generation" : 48,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7847946045370937,
      "LackOfCohesion" : 0.5420782063129407,
      "MetricsIntensity" : 0.060975732002887896,
      "Density" : 3.283879254977521
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "78f15966-ecf1-4717-a55c-da55923dd5d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5478267427115466,
      "MetricsIntensity" : 0.05980930561256037,
      "Density" : 0.9955174429935685
    },
    "euclideanDistance" : 69.01660177834634,
    "generation" : 44,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7821297429620568,
      "LackOfCohesion" : 0.5478267427115466,
      "MetricsIntensity" : 0.05980930561256038,
      "Density" : 3.2785622593068044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "15b1eb52-d394-4e80-a0a2-b313ed4448df",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.5475162354763611,
      "MetricsIntensity" : 0.05988690354737899,
      "Density" : 0.9953225492106802
    },
    "euclideanDistance" : 70.01636442134775,
    "generation" : 45,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7838334353949787,
      "LackOfCohesion" : 0.5475162354763611,
      "MetricsIntensity" : 0.05988690354737899,
      "Density" : 3.282133676092545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ccc4d089-77a3-4709-a2c7-7ab0dacf38a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5473802977746989,
      "MetricsIntensity" : 0.059886213785687856,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 71.01615351586817,
    "generation" : 45,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7850581751377834,
      "LackOfCohesion" : 0.5473802977746989,
      "MetricsIntensity" : 0.059886213785687856,
      "Density" : 3.2847043701799485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "fa834889-9c91-41cf-9c7c-5409295b010b",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.5463979289544973,
      "MetricsIntensity" : 0.05992425064968656,
      "Density" : 0.9957123367764569
    },
    "euclideanDistance" : 73.01568902644738,
    "generation" : 44,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.784926470588235,
      "LackOfCohesion" : 0.5463979289544973,
      "MetricsIntensity" : 0.05992425064968657,
      "Density" : 3.283419023136247
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "66d0bdd1-1b0e-43ac-95ce-b9cc33a62bf6",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5469741510814271,
      "MetricsIntensity" : 0.059932889809269106,
      "Density" : 0.9951276554277918
    },
    "euclideanDistance" : 74.01546883241568,
    "generation" : 46,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.784313725490196,
      "LackOfCohesion" : 0.5469741510814271,
      "MetricsIntensity" : 0.059932889809269106,
      "Density" : 3.2836012861736323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "d70b3468-0875-44f9-ac86-2c9408e1dbe4",
    "objectives" : {
      "NumberOfConcerns" : 0.9989715461090161,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.5467388235066872,
      "MetricsIntensity" : 0.059897269170024595,
      "Density" : 0.9955174429935685
    },
    "euclideanDistance" : 77.01487849859419,
    "generation" : 44,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.786633966891478,
      "LackOfCohesion" : 0.5467388235066872,
      "MetricsIntensity" : 0.059897269170024595,
      "Density" : 3.284887459807074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "4ed28cd8-9edd-49d8-8c64-2f4e3f874856",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5459942081875928,
      "MetricsIntensity" : 0.060721018664048505,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 78.01472127681002,
    "generation" : 45,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7840978593272172,
      "LackOfCohesion" : 0.5459942081875928,
      "MetricsIntensity" : 0.06072101866404851,
      "Density" : 3.2786675208199876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6bf86d7-a802-4a0f-85a5-d2d5481611dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.5455485547196283,
      "MetricsIntensity" : 0.060839803099097596,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 81.01413107948898,
    "generation" : 43,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7815177478580166,
      "LackOfCohesion" : 0.5455485547196283,
      "MetricsIntensity" : 0.060839803099097596,
      "Density" : 3.2762820512820507
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "652c859b-6465-4cf2-907a-f3c7bfdbc53a",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 84.0,
      "LackOfCohesion" : 0.5441628247354466,
      "MetricsIntensity" : 0.06080798678757588,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 84.01362616671206,
    "generation" : 44,
    "numberOfRefactorings" : 84,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.783221065523576,
      "LackOfCohesion" : 0.5441628247354466,
      "MetricsIntensity" : 0.06080798678757589,
      "Density" : 3.279666452854394
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef5edd8b-25d7-4853-9dba-896ed2fd8b6f",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.5492127216358486,
      "MetricsIntensity" : 0.05983827415856746,
      "Density" : 0.9923991424673553
    },
    "euclideanDistance" : 86.01329342635997,
    "generation" : 42,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7821297429620566,
      "LackOfCohesion" : 0.5492127216358486,
      "MetricsIntensity" : 0.05983827415856746,
      "Density" : 3.268292682926829
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "e57f0a91-8943-4206-af44-0a6185cdee11",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 87.0,
      "LackOfCohesion" : 0.5509657648017643,
      "MetricsIntensity" : 0.059797934006888064,
      "Density" : 0.9959072305593452
    },
    "euclideanDistance" : 87.01320359277102,
    "generation" : 46,
    "numberOfRefactorings" : 87,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7839657282741732,
      "LackOfCohesion" : 0.5509657648017643,
      "MetricsIntensity" : 0.05979793400688807,
      "Density" : 3.2798459563543005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ea42e74d-0fc4-479a-9b07-f2b0297ce670",
    "objectives" : {
      "NumberOfConcerns" : 0.9972574562907096,
      "NumberOfRefactorings" : 88.0,
      "LackOfCohesion" : 0.5435331095728008,
      "MetricsIntensity" : 0.0609963147340881,
      "Density" : 0.9959072305593452
    },
    "euclideanDistance" : 88.01298485131396,
    "generation" : 26,
    "numberOfRefactorings" : 88,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.783568362967505,
      "LackOfCohesion" : 0.5435331095728008,
      "MetricsIntensity" : 0.0609963147340881,
      "Density" : 3.281952472703917
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "7bac91e9-349a-4d7b-a95a-26a209c34482",
    "objectives" : {
      "NumberOfConcerns" : 0.9972574562907096,
      "NumberOfRefactorings" : 88.0,
      "LackOfCohesion" : 0.5434727085395503,
      "MetricsIntensity" : 0.06102925561829863,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 88.01300657585722,
    "generation" : 49,
    "numberOfRefactorings" : 88,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7835683629675048,
      "LackOfCohesion" : 0.5434727085395503,
      "MetricsIntensity" : 0.06102925561829863,
      "Density" : 3.288375080282596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "92ba4712-5ff4-40c9-a9d7-0a9836bbdb81",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.543772388792039,
      "MetricsIntensity" : 0.0610743499939853,
      "Density" : 0.9972714870395635
    },
    "euclideanDistance" : 92.0124291837741,
    "generation" : 48,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7834355828220858,
      "LackOfCohesion" : 0.543772388792039,
      "MetricsIntensity" : 0.06107434999398528,
      "Density" : 3.2885604113110545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "9c5bf341-c8e7-4602-a943-8e26b792028d",
    "objectives" : {
      "NumberOfConcerns" : 1.0030853616729516,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5523280995030042,
      "MetricsIntensity" : 0.05950137588710432,
      "Density" : 0.9984408497368934
    },
    "euclideanDistance" : 93.01242750899719,
    "generation" : 19,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.787416004886988,
      "LackOfCohesion" : 0.5523280995030042,
      "MetricsIntensity" : 0.05950137588710434,
      "Density" : 3.2734824281150154
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc6c2937-1de0-4798-b5b3-47d389f63357",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5506220625245655,
      "MetricsIntensity" : 0.05947785896529277,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 93.01243314710428,
    "generation" : 17,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.788637751985339,
      "LackOfCohesion" : 0.5506220625245655,
      "MetricsIntensity" : 0.05947785896529277,
      "Density" : 3.2760383386581475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "f17b4c38-9a54-4490-b027-605e471db4bb",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5506220625245654,
      "MetricsIntensity" : 0.059477858965292785,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 93.01243314710428,
    "generation" : 40,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.788637751985339,
      "LackOfCohesion" : 0.5506220625245654,
      "MetricsIntensity" : 0.05947785896529279,
      "Density" : 3.276038338658147
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "9f4cce79-2d2e-4785-940e-65e3b12c1092",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 95.0,
      "LackOfCohesion" : 0.5483675570012548,
      "MetricsIntensity" : 0.05998449655259315,
      "Density" : 0.9914246735529136
    },
    "euclideanDistance" : 95.012012052729,
    "generation" : 34,
    "numberOfRefactorings" : 95,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.783088235294119,
      "LackOfCohesion" : 0.5483675570012548,
      "MetricsIntensity" : 0.05998449655259316,
      "Density" : 3.2713826366559497
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "b422c149-dfea-4231-ab49-66c1ea0aec24",
    "objectives" : {
      "NumberOfConcerns" : 1.0020569077819679,
      "NumberOfRefactorings" : 96.0,
      "LackOfCohesion" : 0.5515585488131558,
      "MetricsIntensity" : 0.059531133262924585,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 96.01201797570874,
    "generation" : 45,
    "numberOfRefactorings" : 96,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7866748166259165,
      "LackOfCohesion" : 0.5515585488131558,
      "MetricsIntensity" : 0.059531133262924585,
      "Density" : 3.273657289002558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a5bbbd7b-ced7-4b45-80d3-fea9bf337205",
    "objectives" : {
      "NumberOfConcerns" : 0.9969146383270483,
      "NumberOfRefactorings" : 97.0,
      "LackOfCohesion" : 0.5484047182589349,
      "MetricsIntensity" : 0.059942259907884834,
      "Density" : 0.991619567335802
    },
    "euclideanDistance" : 97.0117595396144,
    "generation" : 45,
    "numberOfRefactorings" : 97,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7818627450980393,
      "LackOfCohesion" : 0.5484047182589349,
      "MetricsIntensity" : 0.059942259907884834,
      "Density" : 3.267822736030828
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "7e86cec6-7948-4b58-8f69-1e358c121a53",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 98.0,
      "LackOfCohesion" : 0.550456952694772,
      "MetricsIntensity" : 0.059921712947272186,
      "Density" : 0.9941531865133503
    },
    "euclideanDistance" : 98.01167323038541,
    "generation" : 45,
    "numberOfRefactorings" : 98,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77906976744186,
      "LackOfCohesion" : 0.550456952694772,
      "MetricsIntensity" : 0.05992171294727219,
      "Density" : 3.2740693196405646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "907d1f48-4b23-454b-8bfe-3fa7c222a300",
    "objectives" : {
      "NumberOfConcerns" : 1.0013712718546453,
      "NumberOfRefactorings" : 99.0,
      "LackOfCohesion" : 0.5501406804911737,
      "MetricsIntensity" : 0.05956920551568843,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 99.01163903610252,
    "generation" : 44,
    "numberOfRefactorings" : 99,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.786544342507645,
      "LackOfCohesion" : 0.5501406804911737,
      "MetricsIntensity" : 0.059569205515688436,
      "Density" : 3.2757517594369805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "4ed3a626-94c3-49fa-af3a-dbe64e3d8c99",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 102.0,
      "LackOfCohesion" : 0.5489000537153048,
      "MetricsIntensity" : 0.05995953748374665,
      "Density" : 0.9949327616449035
    },
    "euclideanDistance" : 102.01121474136282,
    "generation" : 45,
    "numberOfRefactorings" : 102,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7801592161665647,
      "LackOfCohesion" : 0.5489000537153048,
      "MetricsIntensity" : 0.05995953748374664,
      "Density" : 3.27874116891458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ef61a6b8-ea9b-49d4-ac91-23af4b2406ef",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 103.0,
      "LackOfCohesion" : 0.5495688017062377,
      "MetricsIntensity" : 0.05961927738737142,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 103.01116696507674,
    "generation" : 45,
    "numberOfRefactorings" : 103,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.785189718482252,
      "LackOfCohesion" : 0.5495688017062377,
      "MetricsIntensity" : 0.05961927738737141,
      "Density" : 3.2786675208199854
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2a415292-b1d3-44f0-a6dd-b479cb121a1b",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 106.0,
      "LackOfCohesion" : 0.5481846318134254,
      "MetricsIntensity" : 0.06008414910118242,
      "Density" : 0.9937633989475736
    },
    "euclideanDistance" : 106.0107705446997,
    "generation" : 29,
    "numberOfRefactorings" : 106,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7811158798283264,
      "LackOfCohesion" : 0.5481846318134254,
      "MetricsIntensity" : 0.06008414910118241,
      "Density" : 3.281209781209781
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "f1a30fd3-fd9c-4d0f-b4c8-3a727a7d0527",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 108.0,
      "LackOfCohesion" : 0.5482218223089166,
      "MetricsIntensity" : 0.0600418792254397,
      "Density" : 0.9939582927304619
    },
    "euclideanDistance" : 108.0105667488749,
    "generation" : 44,
    "numberOfRefactorings" : 108,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7798896382587368,
      "LackOfCohesion" : 0.5482218223089166,
      "MetricsIntensity" : 0.0600418792254397,
      "Density" : 3.277634961439589
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ea381997-cb60-45db-b58f-a9ff3daf430d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 111.0,
      "LackOfCohesion" : 0.5501233453111705,
      "MetricsIntensity" : 0.059715044479205164,
      "Density" : 0.9959072305593452
    },
    "euclideanDistance" : 111.01034484223403,
    "generation" : 44,
    "numberOfRefactorings" : 111,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.785058175137783,
      "LackOfCohesion" : 0.5501233453111705,
      "MetricsIntensity" : 0.059715044479205164,
      "Density" : 3.2735426008968616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "2e31ec0c-455f-4477-9929-402729154c4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5522446225680918,
      "MetricsIntensity" : 0.05990406326717026,
      "Density" : 0.9920093549015786
    },
    "euclideanDistance" : 112.01021315704811,
    "generation" : 45,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7798165137614683,
      "LackOfCohesion" : 0.5522446225680918,
      "MetricsIntensity" : 0.05990406326717026,
      "Density" : 3.2649134060295055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "20464c31-fb9f-4ca2-a744-60b491e5e6cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5518429316190743,
      "MetricsIntensity" : 0.05995068002657121,
      "Density" : 0.991034885987137
    },
    "euclideanDistance" : 115.00992752907725,
    "generation" : 45,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77906976744186,
      "LackOfCohesion" : 0.5518429316190743,
      "MetricsIntensity" : 0.05995068002657122,
      "Density" : 3.26379974326059
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "8a52a807-ea00-46fa-9d96-4769c79d8615",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.5521484808286108,
      "MetricsIntensity" : 0.05999482086045208,
      "Density" : 0.9918144611186903
    },
    "euclideanDistance" : 119.0095960523396,
    "generation" : 46,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7789344764237596,
      "LackOfCohesion" : 0.5521484808286108,
      "MetricsIntensity" : 0.059994820860452075,
      "Density" : 3.2684649967886963
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "57a2e9b8-2070-47f9-89c4-6ead01d050e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 122.0,
      "LackOfCohesion" : 0.5507277322605982,
      "MetricsIntensity" : 0.06003342731897109,
      "Density" : 0.9918144611186903
    },
    "euclideanDistance" : 122.00934810539934,
    "generation" : 44,
    "numberOfRefactorings" : 122,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7787990196078431,
      "LackOfCohesion" : 0.5507277322605982,
      "MetricsIntensity" : 0.060033427318971086,
      "Density" : 3.2705655526992277
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "052bf10e-daa1-436f-9e05-f7667372b68a",
    "objectives" : {
      "NumberOfConcerns" : 0.9955433664724032,
      "NumberOfRefactorings" : 123.0,
      "LackOfCohesion" : 0.5513099155360001,
      "MetricsIntensity" : 0.060019252229498464,
      "Density" : 0.9902553108555837
    },
    "euclideanDistance" : 123.00926492386178,
    "generation" : 44,
    "numberOfRefactorings" : 123,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7783221065523576,
      "LackOfCohesion" : 0.5513099155360001,
      "MetricsIntensity" : 0.06001925222949847,
      "Density" : 3.263326910725756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "d099d3c0-9126-4f83-a825-f5ac7bfa3d63",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 124.0,
      "LackOfCohesion" : 0.5510019025347687,
      "MetricsIntensity" : 0.060097079159383046,
      "Density" : 0.9914246735529136
    },
    "euclideanDistance" : 124.00920097690818,
    "generation" : 46,
    "numberOfRefactorings" : 124,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7800245098039214,
      "LackOfCohesion" : 0.5510019025347687,
      "MetricsIntensity" : 0.06009707915938305,
      "Density" : 3.2713826366559475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "b1959b6c-d942-450e-bfcb-66138a95fd2f",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 125.0,
      "LackOfCohesion" : 0.5527167929685216,
      "MetricsIntensity" : 0.05967129392459892,
      "Density" : 0.9970765932566751
    },
    "euclideanDistance" : 125.00921527632602,
    "generation" : 46,
    "numberOfRefactorings" : 125,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7858017135862911,
      "LackOfCohesion" : 0.5527167929685216,
      "MetricsIntensity" : 0.05967129392459892,
      "Density" : 3.2752880921895007
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "564df178-0513-40ef-9347-ab6385b285d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9962290023997258,
      "NumberOfRefactorings" : 126.0,
      "LackOfCohesion" : 0.5510781815870698,
      "MetricsIntensity" : 0.05998373633502209,
      "Density" : 0.9943480802962386
    },
    "euclideanDistance" : 126.00908096459102,
    "generation" : 44,
    "numberOfRefactorings" : 126,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7806372549019607,
      "LackOfCohesion" : 0.5510781815870698,
      "MetricsIntensity" : 0.059983736335022096,
      "Density" : 3.2768143866409756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "10362641-0e98-47eb-b2eb-41c44765e664",
    "objectives" : {
      "NumberOfConcerns" : 0.9962290023997258,
      "NumberOfRefactorings" : 127.0,
      "LackOfCohesion" : 0.549386509329315,
      "MetricsIntensity" : 0.060125413114495666,
      "Density" : 0.990450204638472
    },
    "euclideanDistance" : 127.00897174780617,
    "generation" : 40,
    "numberOfRefactorings" : 127,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.781729000613121,
      "LackOfCohesion" : 0.549386509329315,
      "MetricsIntensity" : 0.060125413114495666,
      "Density" : 3.268167202572348
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "3dff06be-2d94-4e47-9e39-98b47707b2a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9948577305450805,
      "NumberOfRefactorings" : 127.0,
      "LackOfCohesion" : 0.5516152859193784,
      "MetricsIntensity" : 0.0600634816742573,
      "Density" : 0.991034885987137
    },
    "euclideanDistance" : 127.00897519110514,
    "generation" : 44,
    "numberOfRefactorings" : 127,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778186274509804,
      "LackOfCohesion" : 0.5516152859193784,
      "MetricsIntensity" : 0.060063481674257305,
      "Density" : 3.267994858611825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "634f7ff3-c5ba-441a-b504-766a1886bc2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 128.0,
      "LackOfCohesion" : 0.5527361478260464,
      "MetricsIntensity" : 0.05968391983116582,
      "Density" : 0.9962970181251218
    },
    "euclideanDistance" : 128.00897994478515,
    "generation" : 46,
    "numberOfRefactorings" : 128,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.781651376146789,
      "LackOfCohesion" : 0.5527361478260464,
      "MetricsIntensity" : 0.05968391983116582,
      "Density" : 3.2727272727272725
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a8328c65-115c-46d0-903c-753de71f0251",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 129.0,
      "LackOfCohesion" : 0.5496163245355264,
      "MetricsIntensity" : 0.06009352657202362,
      "Density" : 0.9902553108555837
    },
    "euclideanDistance" : 129.00881890331434,
    "generation" : 43,
    "numberOfRefactorings" : 129,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778663396689148,
      "LackOfCohesion" : 0.5496163245355264,
      "MetricsIntensity" : 0.060093526572023624,
      "Density" : 3.2654241645244215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "e6a3acbe-4aef-4c7f-aeef-91e79b43d27f",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 131.0,
      "LackOfCohesion" : 0.55162369414986,
      "MetricsIntensity" : 0.05972082751719583,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 131.00877260398443,
    "generation" : 46,
    "numberOfRefactorings" : 131,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7827417380660957,
      "LackOfCohesion" : 0.55162369414986,
      "MetricsIntensity" : 0.05972082751719583,
      "Density" : 3.2740076824583864
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b9cf7bea-961f-4ce4-a8f6-667f6213d703",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 133.0,
      "LackOfCohesion" : 0.5499208422809254,
      "MetricsIntensity" : 0.060137884153185675,
      "Density" : 0.9896706295069188
    },
    "euclideanDistance" : 133.00854549270107,
    "generation" : 43,
    "numberOfRefactorings" : 133,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7785276073619625,
      "LackOfCohesion" : 0.5499208422809254,
      "MetricsIntensity" : 0.060137884153185675,
      "Density" : 3.2655948553054666
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "f0322947-311e-4b6a-a1dc-94dbb908e563",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 134.0,
      "LackOfCohesion" : 0.5496110064961962,
      "MetricsIntensity" : 0.06021598855565763,
      "Density" : 0.9908399922042487
    },
    "euclideanDistance" : 134.0084916722355,
    "generation" : 48,
    "numberOfRefactorings" : 134,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7802332719459788,
      "LackOfCohesion" : 0.5496110064961962,
      "MetricsIntensity" : 0.06021598855565763,
      "Density" : 3.27366387636832
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ef5578b3-08a1-4ded-97f2-b4d3a0798012",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 135.0,
      "LackOfCohesion" : 0.5563411997975902,
      "MetricsIntensity" : 0.05957849290433152,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 135.00854611469455,
    "generation" : 40,
    "numberOfRefactorings" : 135,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7836185819070907,
      "LackOfCohesion" : 0.5563411997975902,
      "MetricsIntensity" : 0.059578492904331516,
      "Density" : 3.2767456758488147
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ce99f959-4f86-4167-8027-f19a3443e10b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 138.0,
      "LackOfCohesion" : 0.5551332313088794,
      "MetricsIntensity" : 0.0596217364631103,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 138.00835516565078,
    "generation" : 45,
    "numberOfRefactorings" : 138,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7853211009174312,
      "LackOfCohesion" : 0.5551332313088794,
      "MetricsIntensity" : 0.0596217364631103,
      "Density" : 3.2754644458680335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "e41458dd-8a02-4132-b54e-477e44850fd6",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 146.0,
      "LackOfCohesion" : 0.5548946800725206,
      "MetricsIntensity" : 0.059693258981483185,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 146.00787740937724,
    "generation" : 38,
    "numberOfRefactorings" : 146,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7821297429620566,
      "LackOfCohesion" : 0.5548946800725206,
      "MetricsIntensity" : 0.059693258981483185,
      "Density" : 3.278383579217447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "c437c5ab-573e-4488-8843-ba35c204807d",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 149.0,
      "LackOfCohesion" : 0.5556444075779905,
      "MetricsIntensity" : 0.059736704928886594,
      "Density" : 0.9951276554277918
    },
    "euclideanDistance" : 149.00771052042703,
    "generation" : 46,
    "numberOfRefactorings" : 149,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.781996325780772,
      "LackOfCohesion" : 0.5556444075779905,
      "MetricsIntensity" : 0.05973670492888659,
      "Density" : 3.2751763951250807
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "11c83b33-4fdd-473d-97dc-6223a1c1d017",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 150.0,
      "LackOfCohesion" : 0.555202626570709,
      "MetricsIntensity" : 0.0597371975993035,
      "Density" : 0.9955174429935685
    },
    "euclideanDistance" : 150.0076600703305,
    "generation" : 39,
    "numberOfRefactorings" : 150,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7819963257807718,
      "LackOfCohesion" : 0.555202626570709,
      "MetricsIntensity" : 0.059737197599303495,
      "Density" : 3.278562259306804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "8d9ea7b3-8e83-4577-89ef-f76f0c75eaa1",
    "objectives" : {
      "NumberOfConcerns" : 0.9962290023997258,
      "NumberOfRefactorings" : 153.0,
      "LackOfCohesion" : 0.5556471018324293,
      "MetricsIntensity" : 0.05978203017981968,
      "Density" : 0.9941531865133503
    },
    "euclideanDistance" : 153.00749370660375,
    "generation" : 47,
    "numberOfRefactorings" : 153,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7806372549019602,
      "LackOfCohesion" : 0.5556471018324293,
      "MetricsIntensity" : 0.05978203017981968,
      "Density" : 3.276172125883109
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "25cfb370-5f08-4b9e-837b-a2f6019bcd86",
    "objectives" : {
      "NumberOfConcerns" : 0.9969146383270483,
      "NumberOfRefactorings" : 153.0,
      "LackOfCohesion" : 0.5559531855808989,
      "MetricsIntensity" : 0.05978071224526447,
      "Density" : 0.9945429740791268
    },
    "euclideanDistance" : 153.00750181674596,
    "generation" : 39,
    "numberOfRefactorings" : 153,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7818627450980395,
      "LackOfCohesion" : 0.5559531855808989,
      "MetricsIntensity" : 0.05978071224526447,
      "Density" : 3.2753530166880624
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "329b07cb-798b-4fe3-8e30-71b2ae610522",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 156.0,
      "LackOfCohesion" : 0.5544951640950468,
      "MetricsIntensity" : 0.060166978196419925,
      "Density" : 0.9890859481582538
    },
    "euclideanDistance" : 156.00730688046912,
    "generation" : 11,
    "numberOfRefactorings" : 156,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7798896382587368,
      "LackOfCohesion" : 0.5544951640950468,
      "MetricsIntensity" : 0.060166978196419925,
      "Density" : 3.2594733461785483
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "6b8a235a-4c79-4acf-afd3-63aa26acb0bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9969146383270483,
      "NumberOfRefactorings" : 157.0,
      "LackOfCohesion" : 0.5538971519517034,
      "MetricsIntensity" : 0.059824427658566416,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 157.00731827827627,
    "generation" : 29,
    "numberOfRefactorings" : 157,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.780771586037967,
      "LackOfCohesion" : 0.5538971519517034,
      "MetricsIntensity" : 0.05982442765856641,
      "Density" : 3.278846153846154
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ac60115-9ebf-47a2-b6db-b7eb820047eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 159.0,
      "LackOfCohesion" : 0.5519015559982101,
      "MetricsIntensity" : 0.05985418112215176,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 159.00721226625467,
    "generation" : 43,
    "numberOfRefactorings" : 159,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.78125,
      "LackOfCohesion" : 0.5519015559982101,
      "MetricsIntensity" : 0.05985418112215177,
      "Density" : 3.2762820512820507
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b6a00507-7462-4f1b-a9f6-2fcdad0036e7",
    "objectives" : {
      "NumberOfConcerns" : 0.9969146383270483,
      "NumberOfRefactorings" : 161.0,
      "LackOfCohesion" : 0.5520410361738419,
      "MetricsIntensity" : 0.05984032024648782,
      "Density" : 0.9962970181251218
    },
    "euclideanDistance" : 161.00712647803508,
    "generation" : 39,
    "numberOfRefactorings" : 161,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7807715860379667,
      "LackOfCohesion" : 0.5520410361738419,
      "MetricsIntensity" : 0.05984032024648782,
      "Density" : 3.2769230769230777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dcae3c7e-1d41-43e9-be4a-c429903a892c",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 163.0,
      "LackOfCohesion" : 0.5581015010148133,
      "MetricsIntensity" : 0.06007548441598713,
      "Density" : 0.9875267978951472
    },
    "euclideanDistance" : 163.0070043001802,
    "generation" : 43,
    "numberOfRefactorings" : 163,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77906976744186,
      "LackOfCohesion" : 0.5581015010148133,
      "MetricsIntensity" : 0.06007548441598713,
      "Density" : 3.2501603592046178
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "56d72062-c991-4f57-944d-351492e2e8a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 164.0,
      "LackOfCohesion" : 0.5574678956540632,
      "MetricsIntensity" : 0.060065608984721894,
      "Density" : 0.9883063730267004
    },
    "euclideanDistance" : 164.00697038274387,
    "generation" : 42,
    "numberOfRefactorings" : 164,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.780905752753978,
      "LackOfCohesion" : 0.5574678956540632,
      "MetricsIntensity" : 0.06006560898472189,
      "Density" : 3.2527261064785113
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "6a0e7dd5-9fc8-4686-85c8-2cc3f3cbb589",
    "objectives" : {
      "NumberOfConcerns" : 0.9955433664724032,
      "NumberOfRefactorings" : 168.0,
      "LackOfCohesion" : 0.5530958841037079,
      "MetricsIntensity" : 0.0599280737272587,
      "Density" : 0.9947378678620152
    },
    "euclideanDistance" : 168.00681568451714,
    "generation" : 28,
    "numberOfRefactorings" : 168,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7805027590435316,
      "LackOfCohesion" : 0.5530958841037079,
      "MetricsIntensity" : 0.0599280737272587,
      "Density" : 3.2738935214881333
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "365378d6-0898-44cd-be60-d2f254fca7f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 170.0,
      "LackOfCohesion" : 0.5569961421742553,
      "MetricsIntensity" : 0.06015842794170373,
      "Density" : 0.9869421165464821
    },
    "euclideanDistance" : 170.00670087561846,
    "generation" : 45,
    "numberOfRefactorings" : 170,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778799019607843,
      "LackOfCohesion" : 0.5569961421742553,
      "MetricsIntensity" : 0.06015842794170373,
      "Density" : 3.252408477842004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "59219fcd-1a7e-4b1a-8aac-a6beeafea71c",
    "objectives" : {
      "NumberOfConcerns" : 0.9948577305450805,
      "NumberOfRefactorings" : 173.0,
      "LackOfCohesion" : 0.5567295511505267,
      "MetricsIntensity" : 0.06019415572963168,
      "Density" : 0.9869421165464821
    },
    "euclideanDistance" : 173.00658186258391,
    "generation" : 30,
    "numberOfRefactorings" : 173,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7792765174739424,
      "LackOfCohesion" : 0.5567295511505267,
      "MetricsIntensity" : 0.06019415572963169,
      "Density" : 3.252408477842004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "faf6ee3d-cfb5-4039-a5c8-4c63ee440c3e",
    "objectives" : {
      "NumberOfConcerns" : 0.9948577305450805,
      "NumberOfRefactorings" : 174.0,
      "LackOfCohesion" : 0.5561569176322005,
      "MetricsIntensity" : 0.060182878517801186,
      "Density" : 0.9867472227635938
    },
    "euclideanDistance" : 174.00654109682645,
    "generation" : 40,
    "numberOfRefactorings" : 174,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778186274509804,
      "LackOfCohesion" : 0.5561569176322005,
      "MetricsIntensity" : 0.060182878517801186,
      "Density" : 3.251766217084136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "fecfcd98-f1f5-4915-95a7-fbd1fcb18a22",
    "objectives" : {
      "NumberOfConcerns" : 0.9955433664724032,
      "NumberOfRefactorings" : 178.0,
      "LackOfCohesion" : 0.557656951692404,
      "MetricsIntensity" : 0.059875876567612105,
      "Density" : 0.9939582927304619
    },
    "euclideanDistance" : 178.00644265328876,
    "generation" : 45,
    "numberOfRefactorings" : 178,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7805027590435314,
      "LackOfCohesion" : 0.557656951692404,
      "MetricsIntensity" : 0.0598758765676121,
      "Density" : 3.2755298651252405
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "0a9ddaeb-cfe5-4a71-97cd-eab17795cd99",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 180.0,
      "LackOfCohesion" : 0.5562433303142927,
      "MetricsIntensity" : 0.06024957137967148,
      "Density" : 0.9883063730267004
    },
    "euclideanDistance" : 180.0063262298619,
    "generation" : 42,
    "numberOfRefactorings" : 180,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7774371551195587,
      "LackOfCohesion" : 0.5562433303142927,
      "MetricsIntensity" : 0.060249571379671484,
      "Density" : 3.2569043031470764
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "fa6f12bf-edac-48ce-9e41-3ac996481cdb",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 181.0,
      "LackOfCohesion" : 0.5561991237062576,
      "MetricsIntensity" : 0.06026308162729266,
      "Density" : 0.9861625414149289
    },
    "euclideanDistance" : 181.00627945541956,
    "generation" : 45,
    "numberOfRefactorings" : 181,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7785276073619634,
      "LackOfCohesion" : 0.5561991237062576,
      "MetricsIntensity" : 0.060263081627292665,
      "Density" : 3.251928020565553
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "a7ecee71-143c-4675-8cbc-0fdec47d917e",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 181.0,
      "LackOfCohesion" : 0.5565546691651082,
      "MetricsIntensity" : 0.05988669697212066,
      "Density" : 0.9933736113817969
    },
    "euclideanDistance" : 181.00632362036245,
    "generation" : 45,
    "numberOfRefactorings" : 181,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.777573529411765,
      "LackOfCohesion" : 0.5565546691651082,
      "MetricsIntensity" : 0.05988669697212066,
      "Density" : 3.2736030828516385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "bb8c5a5d-e8ab-40d7-bce2-b59a3066e78b",
    "objectives" : {
      "NumberOfConcerns" : 0.9931436407267741,
      "NumberOfRefactorings" : 184.0,
      "LackOfCohesion" : 0.5562485822265352,
      "MetricsIntensity" : 0.060272205327171424,
      "Density" : 0.9892808419411421
    },
    "euclideanDistance" : 184.00619026570632,
    "generation" : 43,
    "numberOfRefactorings" : 184,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.776210913549969,
      "LackOfCohesion" : 0.5562485822265352,
      "MetricsIntensity" : 0.06027220532717142,
      "Density" : 3.2601156069364157
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "de89a4dc-d333-4f96-ba68-3b28870cd518",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 185.0,
      "LackOfCohesion" : 0.5568252577146978,
      "MetricsIntensity" : 0.06028085128388976,
      "Density" : 0.9886961605924771
    },
    "euclideanDistance" : 185.00615357798318,
    "generation" : 43,
    "numberOfRefactorings" : 185,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7755977927651743,
      "LackOfCohesion" : 0.5568252577146978,
      "MetricsIntensity" : 0.06028085128388976,
      "Density" : 3.260282776349615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "e9cabdd6-d872-4f8b-8a1a-d870beecc85c",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 185.0,
      "LackOfCohesion" : 0.5557874962628646,
      "MetricsIntensity" : 0.06027230381649133,
      "Density" : 0.9881114792438122
    },
    "euclideanDistance" : 185.00615469475804,
    "generation" : 38,
    "numberOfRefactorings" : 185,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778050275904354,
      "LackOfCohesion" : 0.5557874962628646,
      "MetricsIntensity" : 0.06027230381649133,
      "Density" : 3.25626204238921
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "922dbcde-485d-4e72-8772-5709312bab6e",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 188.0,
      "LackOfCohesion" : 0.5557516994164183,
      "MetricsIntensity" : 0.0599680723073887,
      "Density" : 0.9931787175989086
    },
    "euclideanDistance" : 188.00608116951253,
    "generation" : 38,
    "numberOfRefactorings" : 188,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7785276073619634,
      "LackOfCohesion" : 0.5557516994164183,
      "MetricsIntensity" : 0.059968072307388695,
      "Density" : 3.2750642673521853
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "f3c046b0-40ca-426e-953d-94aec7983e79",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 195.0,
      "LackOfCohesion" : 0.5593188210150517,
      "MetricsIntensity" : 0.06022661808026719,
      "Density" : 0.9861625414149289
    },
    "euclideanDistance" : 195.00583929590638,
    "generation" : 45,
    "numberOfRefactorings" : 195,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775872627066749,
      "LackOfCohesion" : 0.5593188210150517,
      "MetricsIntensity" : 0.06022661808026719,
      "Density" : 3.24775353016688
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "1c50721d-4f1f-43bc-b034-6c69e3579419",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 195.0,
      "LackOfCohesion" : 0.5583012705298009,
      "MetricsIntensity" : 0.06021846953837096,
      "Density" : 0.9871370103293705
    },
    "euclideanDistance" : 195.0058430559486,
    "generation" : 29,
    "numberOfRefactorings" : 195,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7764849969381502,
      "LackOfCohesion" : 0.5583012705298009,
      "MetricsIntensity" : 0.06021846953837097,
      "Density" : 3.2509627727856234
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "6dd97a69-09b7-45e4-818a-6fad97cd28d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 198.0,
      "LackOfCohesion" : 0.5579037095069342,
      "MetricsIntensity" : 0.06026540676930496,
      "Density" : 0.9861625414149289
    },
    "euclideanDistance" : 198.0057434024832,
    "generation" : 46,
    "numberOfRefactorings" : 198,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775735294117647,
      "LackOfCohesion" : 0.5579037095069342,
      "MetricsIntensity" : 0.06026540676930495,
      "Density" : 3.249839434810534
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "95e96ef4-86da-487d-b708-db6d0f559954",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 199.0,
      "LackOfCohesion" : 0.558612137261445,
      "MetricsIntensity" : 0.06026285560051102,
      "Density" : 0.9879165854609238
    },
    "euclideanDistance" : 199.00572694006226,
    "generation" : 39,
    "numberOfRefactorings" : 199,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.776348039215686,
      "LackOfCohesion" : 0.558612137261445,
      "MetricsIntensity" : 0.06026285560051103,
      "Density" : 3.255619781631342
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ca533a14-d67f-4a2c-a596-cfbcfbf4aa57",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 200.0,
      "LackOfCohesion" : 0.5591881269743952,
      "MetricsIntensity" : 0.060248500284579974,
      "Density" : 0.9863574351978172
    },
    "euclideanDistance" : 200.00569391991525,
    "generation" : 43,
    "numberOfRefactorings" : 200,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7758726270667484,
      "LackOfCohesion" : 0.5591881269743952,
      "MetricsIntensity" : 0.060248500284579974,
      "Density" : 3.248395378690629
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ed1b0da4-8961-4fc2-8ede-6f6061cecd27",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 202.0,
      "LackOfCohesion" : 0.5583468176736622,
      "MetricsIntensity" : 0.060298665550247654,
      "Density" : 0.9851880725004872
    },
    "euclideanDistance" : 202.00562615427242,
    "generation" : 42,
    "numberOfRefactorings" : 202,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7768240343347639,
      "LackOfCohesion" : 0.5583468176736622,
      "MetricsIntensity" : 0.06029866555024765,
      "Density" : 3.246628131021194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "3f8ab3f6-9fe0-42b8-9006-acb55462bb3a",
    "objectives" : {
      "NumberOfConcerns" : 0.9931436407267741,
      "NumberOfRefactorings" : 203.0,
      "LackOfCohesion" : 0.5587912631657143,
      "MetricsIntensity" : 0.06029546112459115,
      "Density" : 0.9853829662833755
    },
    "euclideanDistance" : 203.00559893042305,
    "generation" : 45,
    "numberOfRefactorings" : 203,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775122549019608,
      "LackOfCohesion" : 0.5587912631657143,
      "MetricsIntensity" : 0.06029546112459115,
      "Density" : 3.2472703917790633
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.listenerMap], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap(), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener), org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "3430433b-8667-4cf0-9e5c-f940016f539a",
    "objectives" : {
      "NumberOfConcerns" : 0.9924580047994515,
      "NumberOfRefactorings" : 205.0,
      "LackOfCohesion" : 0.5579486664343372,
      "MetricsIntensity" : 0.06034573984454677,
      "Density" : 0.9855778600662639
    },
    "euclideanDistance" : 205.00553964449895,
    "generation" : 40,
    "numberOfRefactorings" : 205,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.776073619631902,
      "LackOfCohesion" : 0.5579486664343372,
      "MetricsIntensity" : 0.06034573984454677,
      "Density" : 3.25
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "2fb02d40-3306-498b-abae-07cb833d5e58",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 206.0,
      "LackOfCohesion" : 0.5571819984894744,
      "MetricsIntensity" : 0.06032395116307527,
      "Density" : 0.9857727538491522
    },
    "euclideanDistance" : 206.00551656211627,
    "generation" : 46,
    "numberOfRefactorings" : 206,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.776824034334763,
      "LackOfCohesion" : 0.5571819984894744,
      "MetricsIntensity" : 0.06032395116307527,
      "Density" : 3.2485549132947984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "af18cc4c-d502-4499-a3b1-56a360284889",
    "objectives" : {
      "NumberOfConcerns" : 0.9921151868357901,
      "NumberOfRefactorings" : 209.0,
      "LackOfCohesion" : 0.5571081202788304,
      "MetricsIntensity" : 0.06037022892548855,
      "Density" : 0.9853829662833755
    },
    "euclideanDistance" : 209.00542884374178,
    "generation" : 35,
    "numberOfRefactorings" : 209,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775460122699387,
      "LackOfCohesion" : 0.5571081202788304,
      "MetricsIntensity" : 0.060370228925488545,
      "Density" : 3.24935732647815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "8acb1b55-d124-4f19-b0e0-0732945731e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9917723688721289,
      "NumberOfRefactorings" : 210.0,
      "LackOfCohesion" : 0.5576852498421805,
      "MetricsIntensity" : 0.06037888169004684,
      "Density" : 0.9847982849347106
    },
    "euclideanDistance" : 210.0054001651884,
    "generation" : 45,
    "numberOfRefactorings" : 210,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7748466257668711,
      "LackOfCohesion" : 0.5576852498421805,
      "MetricsIntensity" : 0.060378881690046834,
      "Density" : 3.2495176848874605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "ffb31f85-83cd-4b26-939d-5f5b9e0effab",
    "objectives" : {
      "NumberOfConcerns" : 0.9924580047994515,
      "NumberOfRefactorings" : 210.0,
      "LackOfCohesion" : 0.5578176636676003,
      "MetricsIntensity" : 0.06036767373910595,
      "Density" : 0.9844084973689339
    },
    "euclideanDistance" : 210.00540192524312,
    "generation" : 16,
    "numberOfRefactorings" : 210,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.776073619631902,
      "LackOfCohesion" : 0.5578176636676003,
      "MetricsIntensity" : 0.060367673739105954,
      "Density" : 3.246143958868895
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "96b3d248-6114-4baf-89d3-5a04f9a43fef",
    "objectives" : {
      "NumberOfConcerns" : 0.9914295509084676,
      "NumberOfRefactorings" : 213.0,
      "LackOfCohesion" : 0.5574187816912812,
      "MetricsIntensity" : 0.0604148395089631,
      "Density" : 0.9847982849347106
    },
    "euclideanDistance" : 213.00532182522446,
    "generation" : 9,
    "numberOfRefactorings" : 213,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7753222836095768,
      "LackOfCohesion" : 0.5574187816912812,
      "MetricsIntensity" : 0.060414839508963106,
      "Density" : 3.2495176848874605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "2565e55b-94b0-4475-920e-5a92743d3bc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9914295509084676,
      "NumberOfRefactorings" : 213.0,
      "LackOfCohesion" : 0.5574187816912809,
      "MetricsIntensity" : 0.06041483950896311,
      "Density" : 0.9847982849347106
    },
    "euclideanDistance" : 213.00532182522446,
    "generation" : 43,
    "numberOfRefactorings" : 213,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7753222836095768,
      "LackOfCohesion" : 0.5574187816912809,
      "MetricsIntensity" : 0.06041483950896312,
      "Density" : 3.249517684887461
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.qos.command.impl.Ls'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  }, {
    "solutionId" : "df43fd9a-dede-4361-b2e4-8c910df6bf17",
    "objectives" : {
      "NumberOfConcerns" : 0.9924580047994515,
      "NumberOfRefactorings" : 213.0,
      "LackOfCohesion" : 0.5574579919629579,
      "MetricsIntensity" : 0.06006353425677087,
      "Density" : 0.9925940362502437
    },
    "euclideanDistance" : 213.0053628030361,
    "generation" : 43,
    "numberOfRefactorings" : 213,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7771639042357272,
      "LackOfCohesion" : 0.5574579919629579,
      "MetricsIntensity" : 0.06006353425677088,
      "Density" : 3.2752411575562705
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConfigCenterBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.rpc.cluster.router.RouterResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.TimeoutCountDown'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.url.component.URLParam.URLParamMap.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.registry.client.OverrideInstanceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.common.convert.StringToOptionalConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.rpc.cluster.support.BroadcastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.remoting.api.SslClientTlsHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.rpc.filter.GenericImplFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointMetadataAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.remoting.http.servlet.ServletHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationBeanPostProcessor.AnnotatedFieldElement'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.registry.nacos.NacosRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanSupport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.qos.server.handler.TelnetIdleEventHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.utils.NativeUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToCollectionConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.rpc.protocol.tri.ClassLoadUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.common.extension.ServicesLoadingStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol'"
      } ]
    } ]
  } ]
}