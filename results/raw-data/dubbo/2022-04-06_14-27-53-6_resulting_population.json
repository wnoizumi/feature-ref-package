{
  "executionId" : "b239a50f-776f-4a75-8450-9541eed33ef1",
  "computingTime" : 4337348,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 35,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "92a1692a-b18c-40ae-892d-42f1d89aff4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5420117528048181,
      "MetricsIntensity" : 0.06101031582025602,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 29.03953351459717,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5420117528048181,
      "MetricsIntensity" : 0.061010315820256025,
      "Density" : 3.2119078104993597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "096aa2f1-e59d-45c8-ac9e-9f51d037ebe8",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5420304369508608,
      "MetricsIntensity" : 0.06099026871034644,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 29.039539015822704,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5420304369508608,
      "MetricsIntensity" : 0.06099026871034644,
      "Density" : 3.211267605633804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "bee4dd4a-fb12-4211-a579-0b1173dd9b39",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5420095690172569,
      "MetricsIntensity" : 0.06099763884083776,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 29.039545494014067,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5420095690172569,
      "MetricsIntensity" : 0.06099763884083776,
      "Density" : 3.2119078104993597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "e95acf34-5d15-441a-b00b-ffe81944392c",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5423685836923093,
      "MetricsIntensity" : 0.06099700432629215,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 30.03821722558912,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019607,
      "LackOfCohesion" : 0.5423685836923093,
      "MetricsIntensity" : 0.060997004326292154,
      "Density" : 3.2112676056338034
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "d508f4a2-5d4b-4e1a-9962-1690686433d5",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5419503907741163,
      "MetricsIntensity" : 0.06102659500569304,
      "Density" : 0.9996016729735112
    },
    "euclideanDistance" : 30.038252911512174,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980395,
      "LackOfCohesion" : 0.5419503907741163,
      "MetricsIntensity" : 0.06102659500569304,
      "Density" : 3.2131882202304736
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "dff5fca4-d4af-4add-a5cb-68de34667794",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5423581901770747,
      "MetricsIntensity" : 0.06099296650645645,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 31.036985715835566,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019607,
      "LackOfCohesion" : 0.5423581901770747,
      "MetricsIntensity" : 0.06099296650645644,
      "Density" : 3.2112676056338025
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "7bc3a065-da25-4a87-9253-bf36a7f3303b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5423592246027616,
      "MetricsIntensity" : 0.06098742892496745,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 31.0369921342516,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019602,
      "LackOfCohesion" : 0.5423592246027616,
      "MetricsIntensity" : 0.06098742892496745,
      "Density" : 3.21190781049936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "a5d89f9f-e7eb-4f1e-9b53-f88c029d23cd",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.541921593575508,
      "MetricsIntensity" : 0.06099763884083776,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 31.036995781479717,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.541921593575508,
      "MetricsIntensity" : 0.06099763884083777,
      "Density" : 3.21190781049936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "355692db-1417-4d37-a8cd-e5b492c1bc0c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5421947230891369,
      "MetricsIntensity" : 0.061029565326713824,
      "Density" : 1.0023899621589325
    },
    "euclideanDistance" : 31.037080828573934,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7477036129822414,
      "LackOfCohesion" : 0.5421947230891369,
      "MetricsIntensity" : 0.06102956532671382,
      "Density" : 3.2200895713371724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceName, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(MethodConfig, Class<?>, boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getInterface(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.LongArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.metadata.AbstractCacheManager.CacheRefreshTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.metadata.AbstractCacheManager.CacheRefreshTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.metadata.AbstractCacheManager.CacheRefreshTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.metadata.report.MetadataReportFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.metadata.report.MetadataReportFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToByteConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToByteConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.convert.StringToByteConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.convert.StringToByteConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToByteConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.config.spring.SpringScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Identity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Identity'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.logger, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "efd29bbd-2ef3-41b2-8a44-5e73caddbbaa",
    "objectives" : {
      "NumberOfConcerns" : 0.9982499124956248,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5422823310992294,
      "MetricsIntensity" : 0.06099569637362089,
      "Density" : 0.9982075283808006
    },
    "euclideanDistance" : 32.03577237650299,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7475490196078436,
      "LackOfCohesion" : 0.5422823310992294,
      "MetricsIntensity" : 0.06099569637362089,
      "Density" : 3.2087067861715743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "81507d6c-d734-486b-8c34-af83419ba596",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5422823310992295,
      "MetricsIntensity" : 0.06098873925441562,
      "Density" : 0.9982075283808006
    },
    "euclideanDistance" : 32.035783271879644,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7481617647058814,
      "LackOfCohesion" : 0.5422823310992295,
      "MetricsIntensity" : 0.06098873925441562,
      "Density" : 3.208706786171575
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "1bfa65a7-6f66-48d9-bacb-dcea3e0716a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5422614631656256,
      "MetricsIntensity" : 0.06099610938490695,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 32.03578913906137,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748161764705882,
      "LackOfCohesion" : 0.5422614631656256,
      "MetricsIntensity" : 0.060996109384906946,
      "Density" : 3.2093469910371315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "436b86af-141f-4650-af0e-392d817b618e",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5422614631656257,
      "MetricsIntensity" : 0.06099610938490694,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 32.03578913906137,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7481617647058822,
      "LackOfCohesion" : 0.5422614631656257,
      "MetricsIntensity" : 0.06099610938490693,
      "Density" : 3.209346991037132
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "9207cbf3-72c1-47db-96c1-200a2bbbb304",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5418868500079936,
      "MetricsIntensity" : 0.06099674389945257,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 32.035799921541475,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039214,
      "LackOfCohesion" : 0.5418868500079936,
      "MetricsIntensity" : 0.06099674389945257,
      "Density" : 3.209987195902689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "80c94664-08a3-463c-94f0-80b1b6099d9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5418868500079936,
      "MetricsIntensity" : 0.06099674389945257,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 32.035799921541475,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039214,
      "LackOfCohesion" : 0.5418868500079936,
      "MetricsIntensity" : 0.060996743899452574,
      "Density" : 3.209987195902689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "2573081c-fb70-40eb-b6c5-299fe2965d9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.542258967408413,
      "MetricsIntensity" : 0.06098406692003428,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 32.03581240280288,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039216,
      "LackOfCohesion" : 0.542258967408413,
      "MetricsIntensity" : 0.060984066920034295,
      "Density" : 3.2085732565579015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "a64e6f22-96e7-4173-9ff7-5af3c9eff2e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.542258967408413,
      "MetricsIntensity" : 0.06098406692003428,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 32.03581240280288,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039214,
      "LackOfCohesion" : 0.542258967408413,
      "MetricsIntensity" : 0.06098406692003428,
      "Density" : 3.208573256557902
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "3e1adcfa-cd16-4283-9746-b8fa5a92b7ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5420275463869927,
      "MetricsIntensity" : 0.06093849639718431,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 32.035825526088,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019602,
      "LackOfCohesion" : 0.5420275463869927,
      "MetricsIntensity" : 0.060938496397184315,
      "Density" : 3.2112676056338034
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "bea4953c-409e-4dc2-be91-5a46d9c4e034",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5420275463869927,
      "MetricsIntensity" : 0.06093849639718431,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 32.035825526088,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5420275463869927,
      "MetricsIntensity" : 0.060938496397184315,
      "Density" : 3.211267605633803
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "f0118933-4af2-440d-8ab6-f0d939563f11",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.542245864683046,
      "MetricsIntensity" : 0.06099610938490695,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 33.034705520796365,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748161764705882,
      "LackOfCohesion" : 0.542245864683046,
      "MetricsIntensity" : 0.060996109384906946,
      "Density" : 3.2093469910371324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "7247e082-42b8-42e4-bd85-9e46587588f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418358411623928,
      "MetricsIntensity" : 0.06095638249883629,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 33.0347093021773,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039216,
      "LackOfCohesion" : 0.5418358411623928,
      "MetricsIntensity" : 0.060956382498836295,
      "Density" : 3.2093469910371315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "226536cb-ebc0-48e1-871e-4543115f9cc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418380873438843,
      "MetricsIntensity" : 0.06095140843725848,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 33.034715349752084,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039216,
      "LackOfCohesion" : 0.5418380873438843,
      "MetricsIntensity" : 0.06095140843725848,
      "Density" : 3.209987195902689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "894d7573-e439-40ba-9ac2-ea74f9743675",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418105140262166,
      "MetricsIntensity" : 0.06096478659776295,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 33.03472094330055,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039207,
      "LackOfCohesion" : 0.5418105140262166,
      "MetricsIntensity" : 0.060964786597762964,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "3327747b-7c8d-4e21-ad89-89e4936bcc7d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418105140262164,
      "MetricsIntensity" : 0.060964786597762964,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 33.03472094330055,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039211,
      "LackOfCohesion" : 0.5418105140262164,
      "MetricsIntensity" : 0.060964786597762964,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "50b30e9f-40e1-4610-bd1a-50a026dd01e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.541641546463381,
      "MetricsIntensity" : 0.06095313579652049,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 33.0347287371258,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019607,
      "LackOfCohesion" : 0.541641546463381,
      "MetricsIntensity" : 0.06095313579652048,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "f9c54598-7079-47de-9059-03a2bf18bedf",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418083302386554,
      "MetricsIntensity" : 0.060952109618344706,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 33.03473147026095,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5418083302386554,
      "MetricsIntensity" : 0.060952109618344706,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "617707fd-2f4f-4161-9adf-5c9281d51980",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5419489300347915,
      "MetricsIntensity" : 0.060948071798508995,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 33.03473376911169,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5419489300347915,
      "MetricsIntensity" : 0.060948071798508995,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "30ce7ecd-059c-4b95-bf08-bc612f43f328",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5419499644604784,
      "MetricsIntensity" : 0.06094253421702002,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 33.0347397981734,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5419499644604784,
      "MetricsIntensity" : 0.06094253421702003,
      "Density" : 3.211267605633803
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "6a5f6aec-fe05-4a95-9253-101c956754bf",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5418189372068095,
      "MetricsIntensity" : 0.0609514751037991,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 33.03475427874552,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5418189372068095,
      "MetricsIntensity" : 0.060951475103799106,
      "Density" : 3.21190781049936
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "ea9e48d8-845a-4de3-a83d-0f7f66065c48",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5417927317560759,
      "MetricsIntensity" : 0.060952109618344706,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 34.033710735235985,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5417927317560759,
      "MetricsIntensity" : 0.060952109618344706,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "3252d17e-83f6-4b37-a1c1-b1acbef0e2d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5423537731779663,
      "MetricsIntensity" : 0.060946722930932576,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 35.03274149663961,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039214,
      "LackOfCohesion" : 0.5423537731779663,
      "MetricsIntensity" : 0.06094672293093258,
      "Density" : 3.209987195902689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "9e4b0b2d-3271-4098-a46c-13307db7fda9",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.541735953279486,
      "MetricsIntensity" : 0.06095147510379909,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 35.032747605793915,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019607,
      "LackOfCohesion" : 0.541735953279486,
      "MetricsIntensity" : 0.0609514751037991,
      "Density" : 3.210627400768246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.rpc.TriRpcStatus'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "21458ad9-ad9c-46d9-8b9b-118d3cfb5442",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5426015183977796,
      "MetricsIntensity" : 0.060895291212914204,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 35.03276658245571,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019602,
      "LackOfCohesion" : 0.5426015183977796,
      "MetricsIntensity" : 0.060895291212914204,
      "Density" : 3.2092130518234168
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListBoolMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "ee73417f-031c-4fb6-a162-7ced20357f5a",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5431877255247661,
      "MetricsIntensity" : 0.06094205059655123,
      "Density" : 0.9982075283808006
    },
    "euclideanDistance" : 36.03182464056735,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7481617647058822,
      "LackOfCohesion" : 0.5431877255247661,
      "MetricsIntensity" : 0.06094205059655124,
      "Density" : 3.2087067861715743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  }, {
    "solutionId" : "e38cb510-ca0d-436b-b9b1-6f4ec0853a7d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5425713821294357,
      "MetricsIntensity" : 0.06090733367778685,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 36.03183603509624,
    "generation" : 1,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039218,
      "LackOfCohesion" : 0.5425713821294357,
      "MetricsIntensity" : 0.06090733367778685,
      "Density" : 3.209987195902689
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListBoolMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleServerConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.config.spring.ServiceBean'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.profiler.ProfilerEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.RemotingServerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.config.MetricsConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServicePackagesHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.protocol.rest.NettyRestProtocolServer'"
      } ]
    } ]
  } ]
}