{
  "executionId" : "e2a249fe-81b6-4c29-928c-c14d84bce2d3",
  "computingTime" : 16509,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1266709102482486,
    "meanNumConcerns" : 1.7022713321055851,
    "meanMetricsIntensity" : 0.06120302141264512,
    "meanLackOfCohesion" : 0.5405929317787899
  },
  "population" : [ {
    "solutionId" : "eac87dac-2063-4ab9-a150-fc8b83660be6",
    "objectives" : {
      "NumberOfConcerns" : 1.00360620266859,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5436566676608287,
      "MetricsIntensity" : 0.060975072590768786,
      "Density" : 1.0014250814332248
    },
    "euclideanDistance" : 6.189455398944881,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7021406727828745,
      "LackOfCohesion" : 0.5436566676608287,
      "MetricsIntensity" : 0.06097507259076879,
      "Density" : 3.1211928934010147,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.serialVersionUID], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.getPath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0336699b-5fe2-451f-8557-7ab63bef2391",
    "objectives" : {
      "NumberOfConcerns" : 0.999278759466282,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.540589272013999,
      "MetricsIntensity" : 0.061163638767363096,
      "Density" : 0.9985749185667753
    },
    "euclideanDistance" : 10.113935320083622,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7010435850214862,
      "LackOfCohesion" : 0.540589272013999,
      "MetricsIntensity" : 0.06116363876736311,
      "Density" : 3.122215149586251,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "0843afc7-f8f5-45dd-96bd-c55d91de546e",
    "objectives" : {
      "NumberOfConcerns" : 1.0028849621348719,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5453233572171828,
      "MetricsIntensity" : 0.06072894006061702,
      "Density" : 0.9985749185667753
    },
    "euclideanDistance" : 10.11454377040084,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6967663209273944,
      "LackOfCohesion" : 0.5453233572171828,
      "MetricsIntensity" : 0.060728940060617034,
      "Density" : 3.1044303797468347,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "0809e696-a577-4d07-a259-331f22ca9ec5",
    "objectives" : {
      "NumberOfConcerns" : 1.002163721601154,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5442344270688936,
      "MetricsIntensity" : 0.06080038976145361,
      "Density" : 0.9997964169381107
    },
    "euclideanDistance" : 11.104224997685247,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.696581196581197,
      "LackOfCohesion" : 0.5442344270688936,
      "MetricsIntensity" : 0.06080038976145361,
      "Density" : 3.1121673003802277,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "fbd2f989-d747-42da-bef4-c212d22f4811",
    "objectives" : {
      "NumberOfConcerns" : 1.0028849621348719,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.545177153895902,
      "MetricsIntensity" : 0.06082322165862962,
      "Density" : 0.9997964169381107
    },
    "euclideanDistance" : 14.08212656937941,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6978021978021982,
      "LackOfCohesion" : 0.545177153895902,
      "MetricsIntensity" : 0.06082322165862961,
      "Density" : 3.1101963267891066,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "8b8b2418-b80d-46b3-ada6-65a1a9c48398",
    "objectives" : {
      "NumberOfConcerns" : 1.001803101334295,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5433682532291141,
      "MetricsIntensity" : 0.060856331716026134,
      "Density" : 0.9987785016286646
    },
    "euclideanDistance" : 16.071718032024013,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.69700671960904,
      "LackOfCohesion" : 0.5433682532291141,
      "MetricsIntensity" : 0.060856331716026134,
      "Density" : 3.1089987325728767,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "0cc35b01-87d2-415d-a165-86d114eb593a",
    "objectives" : {
      "NumberOfConcerns" : 0.999639379733141,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5421892424471688,
      "MetricsIntensity" : 0.0609330178139219,
      "Density" : 0.997557003257329
    },
    "euclideanDistance" : 24.04770427445302,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6954128440366976,
      "LackOfCohesion" : 0.5421892424471688,
      "MetricsIntensity" : 0.060933017813921894,
      "Density" : 3.1091370558375626,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "0f5454cc-a35f-48dc-852d-ac3c8b6c4390",
    "objectives" : {
      "NumberOfConcerns" : 0.999639379733141,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5447600512558294,
      "MetricsIntensity" : 0.06092335768750538,
      "Density" : 0.9989820846905537
    },
    "euclideanDistance" : 24.047821507654326,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6943765281173593,
      "LackOfCohesion" : 0.5447600512558294,
      "MetricsIntensity" : 0.06092335768750538,
      "Density" : 3.1116043119847805,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ed5876b-1ada-4ddc-ba7c-e404f87a1eee",
    "objectives" : {
      "NumberOfConcerns" : 1.000360620266859,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5447966149931321,
      "MetricsIntensity" : 0.06092163804144124,
      "Density" : 0.9989820846905537
    },
    "euclideanDistance" : 25.045941814469725,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.69559902200489,
      "LackOfCohesion" : 0.5447966149931321,
      "MetricsIntensity" : 0.060921638041441246,
      "Density" : 3.1116043119847814,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "3d441053-6808-4e54-b171-b1a1a1bb11dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9985575189325641,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5445906012680002,
      "MetricsIntensity" : 0.060963377701569114,
      "Density" : 0.997557003257329
    },
    "euclideanDistance" : 27.04242098166831,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6935779816513759,
      "LackOfCohesion" : 0.5445906012680002,
      "MetricsIntensity" : 0.0609633777015691,
      "Density" : 3.111111111111111,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.serialVersionUID], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.getPath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d7799353-7621-4304-8c40-4ad694ac9a13",
    "objectives" : {
      "NumberOfConcerns" : 0.999278759466282,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5484572764218446,
      "MetricsIntensity" : 0.060992315402990153,
      "Density" : 0.998371335504886
    },
    "euclideanDistance" : 30.03830602429632,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6948012232415899,
      "LackOfCohesion" : 0.5484572764218446,
      "MetricsIntensity" : 0.060992315402990153,
      "Density" : 3.111675126903554,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.serialVersionUID], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.getPath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "1582011d-0f2a-4040-8836-055dc78d5eb2",
    "objectives" : {
      "NumberOfConcerns" : 1.00360620266859,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5465695755786715,
      "MetricsIntensity" : 0.060925409816719976,
      "Density" : 1.0087540716612378
    },
    "euclideanDistance" : 30.038762630868096,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000610873549173,
      "LackOfCohesion" : 0.5465695755786715,
      "MetricsIntensity" : 0.060925409816719976,
      "Density" : 3.142041851616994,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "3f22d583-5af8-4526-8d1d-a41bb730ab5a",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5449852637436754,
      "MetricsIntensity" : 0.06107635176109281,
      "Density" : 0.9997964169381107
    },
    "euclideanDistance" : 31.037079955011304,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6970624235006122,
      "LackOfCohesion" : 0.5449852637436754,
      "MetricsIntensity" : 0.06107635176109281,
      "Density" : 3.12007623888183,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "39e29481-e3b7-46e4-8be1-44d500777bce",
    "objectives" : {
      "NumberOfConcerns" : 0.999278759466282,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5469901716223377,
      "MetricsIntensity" : 0.06095463688406983,
      "Density" : 1.0063110749185669
    },
    "euclideanDistance" : 32.03613793412423,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6937652811735944,
      "LackOfCohesion" : 0.5469901716223377,
      "MetricsIntensity" : 0.06095463688406984,
      "Density" : 3.134432466708941,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.serialVersionUID], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.getPath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "39c92c54-9946-42ba-9cab-f95e2607dde7",
    "objectives" : {
      "NumberOfConcerns" : 0.997475658131987,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5425489102456145,
      "MetricsIntensity" : 0.06108633332677106,
      "Density" : 0.9973534201954397
    },
    "euclideanDistance" : 33.034644880692596,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6948529411764703,
      "LackOfCohesion" : 0.5425489102456145,
      "MetricsIntensity" : 0.061086333326771054,
      "Density" : 3.114431023521933,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "64c46f6a-137a-4331-93dc-ed1c742fd578",
    "objectives" : {
      "NumberOfConcerns" : 0.9985575189325641,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5451059414460216,
      "MetricsIntensity" : 0.06102074497138873,
      "Density" : 0.9930781758957655
    },
    "euclideanDistance" : 35.03261602279758,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6935779816513759,
      "LackOfCohesion" : 0.5451059414460216,
      "MetricsIntensity" : 0.061020744971388735,
      "Density" : 3.097142857142858,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7468f34a-ff2f-4437-9982-7a3fc78fb746",
    "objectives" : {
      "NumberOfConcerns" : 0.9985575189325641,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5451692999463849,
      "MetricsIntensity" : 0.061118049026429984,
      "Density" : 0.999185667752443
    },
    "euclideanDistance" : 35.03279084085052,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.695652173913044,
      "LackOfCohesion" : 0.5451692999463849,
      "MetricsIntensity" : 0.061118049026429984,
      "Density" : 3.1181702668360862,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "69195530-3f39-440d-be1a-96b5ba1c82c8",
    "objectives" : {
      "NumberOfConcerns" : 0.998196898665705,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5461222120705174,
      "MetricsIntensity" : 0.060934874345803525,
      "Density" : 0.9928745928338762
    },
    "euclideanDistance" : 36.03171047195829,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6919315403422979,
      "LackOfCohesion" : 0.5461222120705174,
      "MetricsIntensity" : 0.06093487434580352,
      "Density" : 3.0945431472081224,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d1d9b40d-9f25-4a8f-9794-39d441e0012f",
    "objectives" : {
      "NumberOfConcerns" : 0.997475658131987,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5439360007212178,
      "MetricsIntensity" : 0.061116983271153814,
      "Density" : 0.9981677524429967
    },
    "euclideanDistance" : 37.030945143340695,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6948529411764703,
      "LackOfCohesion" : 0.5439360007212178,
      "MetricsIntensity" : 0.061116983271153814,
      "Density" : 3.1169739351557526,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "48b631a1-5a55-474e-9b3b-cf30b0bf8b8e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5441559911564574,
      "MetricsIntensity" : 0.06113017573562945,
      "Density" : 0.9995928338762216
    },
    "euclideanDistance" : 39.029463594502985,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6970624235006122,
      "LackOfCohesion" : 0.5441559911564574,
      "MetricsIntensity" : 0.06113017573562945,
      "Density" : 3.1194409148665825,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "742b0e2d-8125-41ce-8c73-2bfba5a0ac58",
    "objectives" : {
      "NumberOfConcerns" : 0.999639379733141,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5469156972025314,
      "MetricsIntensity" : 0.06093643885737136,
      "Density" : 1.0071254071661238
    },
    "euclideanDistance" : 44.02631497757563,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6933414783139886,
      "LackOfCohesion" : 0.5469156972025314,
      "MetricsIntensity" : 0.06093643885737135,
      "Density" : 3.136968928344958,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7abaeea-0be5-43ee-9415-f11755af10c1",
    "objectives" : {
      "NumberOfConcerns" : 0.997475658131987,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5459480985011678,
      "MetricsIntensity" : 0.0610475619539584,
      "Density" : 1.0010179153094463
    },
    "euclideanDistance" : 45.025534762914404,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.693815064298836,
      "LackOfCohesion" : 0.5459480985011678,
      "MetricsIntensity" : 0.06104756195395841,
      "Density" : 3.1258741258741254,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey(), org.apache.dubbo.registry.client.InstanceAddressURL.getVersion(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol(), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getPath(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String), org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameters(), org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers(), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "571762a5-cad4-4509-8bcf-d13d6eb3fd7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9960331770645511,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5468363703942536,
      "MetricsIntensity" : 0.061120099952835315,
      "Density" : 1.005700325732899
    },
    "euclideanDistance" : 46.0250614439307,
    "generation" : 0,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6903304773561814,
      "LackOfCohesion" : 0.5468363703942536,
      "MetricsIntensity" : 0.06112009995283532,
      "Density" : 3.138500635324016,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.serialVersionUID], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.getPath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "00576063-4efd-44be-8c81-bdc15b5a7c67",
    "objectives" : {
      "NumberOfConcerns" : 0.9956725567976921,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5427216364398173,
      "MetricsIntensity" : 0.06121583628372065,
      "Density" : 1.0061074918566775
    },
    "euclideanDistance" : 53.02171168756062,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6917892156862737,
      "LackOfCohesion" : 0.5427216364398173,
      "MetricsIntensity" : 0.06121583628372065,
      "Density" : 3.1417673235855057,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9a580c9c-497b-4ab5-a933-f61706f66dad",
    "objectives" : {
      "NumberOfConcerns" : 0.997836278398846,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5491809331030749,
      "MetricsIntensity" : 0.06108683149966405,
      "Density" : 0.9945032573289903
    },
    "euclideanDistance" : 59.01940397246988,
    "generation" : 0,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6923547400611618,
      "LackOfCohesion" : 0.5491809331030749,
      "MetricsIntensity" : 0.06108683149966404,
      "Density" : 3.101587301587302,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.lock, org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted(), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.stop(), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting(), org.apache.dubbo.config.bootstrap.DubboBootstrap.start(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping(), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.await(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable), org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel(), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending(), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy(), org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel), org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager(), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>), org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig), org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>), org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)]"
      } ]
    } ]
  }, {
    "solutionId" : "33c3d7b0-62d7-4806-a713-66683d2ce44b",
    "objectives" : {
      "NumberOfConcerns" : 0.997115037865128,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.546571313579234,
      "MetricsIntensity" : 0.06117212294238516,
      "Density" : 0.9953175895765473
    },
    "euclideanDistance" : 62.01844385126339,
    "generation" : 0,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.693202694427434,
      "LackOfCohesion" : 0.546571313579234,
      "MetricsIntensity" : 0.06117212294238516,
      "Density" : 3.108073744437381,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "352de914-75c5-4082-9318-7d3e751bdebb",
    "objectives" : {
      "NumberOfConcerns" : 0.997475658131987,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5488014737315837,
      "MetricsIntensity" : 0.061163537965049794,
      "Density" : 0.995114006514658
    },
    "euclideanDistance" : 63.01817304246827,
    "generation" : 0,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6938150642988365,
      "LackOfCohesion" : 0.5488014737315837,
      "MetricsIntensity" : 0.0611635379650498,
      "Density" : 3.107438016528926,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "794c5361-63bf-476a-a3c5-e90d901e5540",
    "objectives" : {
      "NumberOfConcerns" : 0.998196898665705,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.548533743067184,
      "MetricsIntensity" : 0.06113750109192425,
      "Density" : 1.0075325732899023
    },
    "euclideanDistance" : 69.01678162589204,
    "generation" : 0,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6940024479804159,
      "LackOfCohesion" : 0.548533743067184,
      "MetricsIntensity" : 0.06113750109192425,
      "Density" : 3.144218551461246,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "8ead2b95-4a2b-4ae3-b55c-7afe76e1c1db",
    "objectives" : {
      "NumberOfConcerns" : 0.997836278398846,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5501507764197922,
      "MetricsIntensity" : 0.06121404455761169,
      "Density" : 1.0028501628664495
    },
    "euclideanDistance" : 74.01559159206725,
    "generation" : 0,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.693390452876377,
      "LackOfCohesion" : 0.5501507764197922,
      "MetricsIntensity" : 0.06121404455761169,
      "Density" : 3.131595677050223,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryCounter, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryScheduledFuture, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryLimit, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryTimesIfNonFail, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.DEFAULT_ROOT, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.version, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryExecutor, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retryPeriod], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5d27f820-e4a7-4cbf-954f-06ac81af5603",
    "objectives" : {
      "NumberOfConcerns" : 0.994951316263974,
      "NumberOfRefactorings" : 94.0,
      "LackOfCohesion" : 0.5510820746322324,
      "MetricsIntensity" : 0.06128371321991826,
      "Density" : 1.000814332247557
    },
    "euclideanDistance" : 94.01222795251611,
    "generation" : 0,
    "numberOfRefactorings" : 94,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6895284751990205,
      "LackOfCohesion" : 0.5510820746322324,
      "MetricsIntensity" : 0.061283713219918254,
      "Density" : 3.127226463104326,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboReferencesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.rpc.protocol.rest.RestServerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.registry.support.RegistryManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='com.alibaba.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.AddressRefreshRetryTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode, org.apache.dubbo.config.bootstrap.DubboBootstrap.configManager, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.moduleModel, org.apache.dubbo.config.bootstrap.DubboBootstrap.condition, org.apache.dubbo.config.bootstrap.DubboBootstrap.applicationDeployer, org.apache.dubbo.config.bootstrap.DubboBootstrap.logger, org.apache.dubbo.config.bootstrap.DubboBootstrap.NAME, org.apache.dubbo.config.bootstrap.DubboBootstrap.bootstrap], extractedMethods=[org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode(), org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode), org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>), org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String), org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule(), org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)]"
      } ]
    } ]
  }, {
    "solutionId" : "da215263-f098-4906-82f3-52a08b9f9544",
    "objectives" : {
      "NumberOfConcerns" : 0.99639379733141,
      "NumberOfRefactorings" : 101.0,
      "LackOfCohesion" : 0.5475127339531456,
      "MetricsIntensity" : 0.06111334098928151,
      "Density" : 0.9963355048859935
    },
    "euclideanDistance" : 101.01133099841792,
    "generation" : 0,
    "numberOfRefactorings" : 101,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6919779546846294,
      "LackOfCohesion" : 0.5475127339531456,
      "MetricsIntensity" : 0.06111334098928151,
      "Density" : 3.1132315521628495,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLAddress.timestamp], extractedMethods=[org.apache.dubbo.common.url.component.URLAddress.getPath(), org.apache.dubbo.common.url.component.URLAddress.setPath(String), org.apache.dubbo.common.url.component.URLAddress.hashCode(), org.apache.dubbo.common.url.component.URLAddress.getUsername(), org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.setUsername(String), org.apache.dubbo.common.url.component.URLAddress.setPassword(String), org.apache.dubbo.common.url.component.URLAddress.getIp(), org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int), org.apache.dubbo.common.url.component.URLAddress.getHost(), org.apache.dubbo.common.url.component.URLAddress.getTimestamp(), org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String), org.apache.dubbo.common.url.component.URLAddress.getPassword(), org.apache.dubbo.common.url.component.URLAddress.getProtocol(), org.apache.dubbo.common.url.component.URLAddress.equals(Object), org.apache.dubbo.common.url.component.URLAddress.setProtocol(String), org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long), org.apache.dubbo.common.url.component.URLAddress.getPort()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.convert.StringToLongConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.support.FailbackRegistry.Holder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.MultipleNotifyListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.common.config.PropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode', targetTypeName='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.start()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    } ]
  }, {
    "solutionId" : "c258dff8-9293-4002-a03a-0b65a79c3538",
    "objectives" : {
      "NumberOfConcerns" : 0.9935088351965381,
      "NumberOfRefactorings" : 110.0,
      "LackOfCohesion" : 0.5478192744635743,
      "MetricsIntensity" : 0.0612235711724885,
      "Density" : 0.9940960912052117
    },
    "euclideanDistance" : 110.01035924460616,
    "generation" : 0,
    "numberOfRefactorings" : 110,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6881127450980395,
      "LackOfCohesion" : 0.5478192744635743,
      "MetricsIntensity" : 0.06122357117248851,
      "Density" : 3.108211330362826,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.Subset'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.spring.boot.autoconfigure.RelaxedDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboListenerAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.monitor.dubbo.Statistics'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcServiceContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated, org.apache.dubbo.metadata.AbstractServiceNameMapping.mappingLocks], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener), org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel), org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String), org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL), org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.registry.integration.AbstractConfiguratorListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lastCacheChanged, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.properties, org.apache.dubbo.metadata.report.support.AbstractMetadataReport.file], extractedMethods=[org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime(), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL), org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.status.support.LoadStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.remoting.exchange.Exchangers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.remoting.exchange.Exchangers'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.MultipleNotifyListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.common.config.PropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode', targetTypeName='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.start()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    } ]
  }, {
    "solutionId" : "aed0b12a-1447-4025-a6f0-6e557416791a",
    "objectives" : {
      "NumberOfConcerns" : 0.994590695997115,
      "NumberOfRefactorings" : 133.0,
      "LackOfCohesion" : 0.5517883832333869,
      "MetricsIntensity" : 0.061098304802738035,
      "Density" : 1.0038680781758957
    },
    "euclideanDistance" : 133.00866575224964,
    "generation" : 0,
    "numberOfRefactorings" : 133,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.686850152905199,
      "LackOfCohesion" : 0.5517883832333869,
      "MetricsIntensity" : 0.061098304802738035,
      "Density" : 3.1347743165924986,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.empty, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.prefix, org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.regex], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty(), org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.contextMap], extractedMethods=[org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext), org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap(), org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry), org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel), org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouter.MatchPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.auth.exception.RpcAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.loadbalance.LoadBalancerSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.utils.SimpleReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.parse(String, String, boolean)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLItemCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.AbstractServiceNameMapping.notifyAtFirstTime, org.apache.dubbo.metadata.AbstractServiceNameMapping.listener, org.apache.dubbo.metadata.AbstractServiceNameMapping.subscribedURL], extractedMethods=[org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.applicationContext, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.referenceBeanMap, org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFile, org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFile], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.newBuilder(), org.apache.dubbo.common.cache.FileCacheStore.loadCache(int), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.common.compiler.support.AdaptiveCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.common.config.configcenter.ConfigItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.qos.command.CommandContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.MultipleNotifyListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.common.config.PropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.qos.command.impl.Quit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode', targetTypeName='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.metadata.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.start()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.registry.client.ServiceDiscoveryRegistry.DefaultMappingListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.config.spring.context.annotation.DubboConfigConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String)', targetType='org.apache.dubbo.common.logger.log4j.Log4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier'"
      } ]
    } ]
  }, {
    "solutionId" : "fd313050-3502-4923-8bcc-64c183cfed6d",
    "objectives" : {
      "NumberOfConcerns" : 0.988460151460512,
      "NumberOfRefactorings" : 183.0,
      "LackOfCohesion" : 0.5504908669540579,
      "MetricsIntensity" : 0.06142792316831389,
      "Density" : 0.996742671009772
    },
    "euclideanDistance" : 183.00622219751872,
    "generation" : 0,
    "numberOfRefactorings" : 183,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6826273787599761,
      "LackOfCohesion" : 0.5504908669540579,
      "MetricsIntensity" : 0.06142792316831389,
      "Density" : 3.1204588910133837,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.isMatch(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setPrefix(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getPrefix()', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setEmpty(String)', targetType='org.apache.dubbo.config.spring.context.properties.AbstractDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getEmpty()', targetType='org.apache.dubbo.config.spring.context.properties.AbstractDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.setRegex(String)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.StringMatch.getRegex()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.context.DubboSpringInitializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.getContextMap()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRuleParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.customize(DubboSpringInitContext)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBySpringContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.remove(BeanDefinitionRegistry)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findContextForApplication(ApplicationModel)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.initContext(DubboSpringInitContext, BeanDefinitionRegistry, ConfigurableListableBeanFactory)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.safeGetModelDesc(ScopeModel)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.findBeanFactory(BeanDefinitionRegistry)', targetType='org.apache.dubbo.remoting.Codec$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.context.DubboSpringInitializer.registerContextBeans(ConfigurableListableBeanFactory, DubboSpringInitContext)', targetType='org.apache.dubbo.remoting.Codec$Adaptive'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocolServiceKey()', targetType='org.apache.dubbo.common.url.component.ServiceConfigURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodNumbers()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPath()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall.ServerStreamListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall.ServerStreamListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInterface()', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall.ServerStreamListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.common.convert.StringToIntegerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getVersion()', targetType='org.apache.dubbo.common.convert.StringToIntegerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProtocol()', targetType='org.apache.dubbo.common.convert.StringToIntegerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getNumbers()', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceInfo(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodNumbers(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceNumbers(String)', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.client.InstanceAddressURL.numbers', targetTypeName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameters()', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String, String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasMethodParameter(String)', targetType='org.apache.dubbo.common.url.component.URLParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.common.url.component.URLParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLAddress",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPort()', targetType='org.apache.dubbo.config.spring.reference.ReferenceBeanManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setProtocol(String)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.DestroyableExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.hashCode()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.equals(Object)', targetType='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getUsername()', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setUsername(String)', targetType='org.apache.dubbo.rpc.cluster.router.tag.model.Tag'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getProtocol()', targetType='org.apache.dubbo.registry.client.DefaultServiceInstance.Endpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createURLAddress(String, String, String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPassword(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPassword()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getIp()', targetType='org.apache.dubbo.metadata.rest.jaxrs.MatrixParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getAddress(String, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.MatrixParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getHost()', targetType='org.apache.dubbo.metadata.rest.jaxrs.MatrixParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getPath()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setPath(String)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.setTimestamp(long)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.getTimestamp()', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLAddress.createPathURLAddress(String, String, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.parseServices(String)', targetType='org.apache.dubbo.rpc.filter.ContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.removeMappingLock(String)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.initInterfaceAppMapping(URL)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.AbstractServiceNameMapping.initiated', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(String)', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.putCachedMappingIfAbsent(String, Set<String>)', targetType='org.apache.dubbo.common.config.configcenter.ConfigChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(URL, MappingListener)', targetType='org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.AbstractServiceNameMapping.get(URL)', targetType='org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.monitor.support.MonitorFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.addReference(ReferenceBean)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.logger', targetTypeName='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.loadCache(int)', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.config.bootstrap.builders.RegistryBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.report.support.AbstractMetadataReport",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetExportedURLs(ServiceMetadataIdentifier)', targetType='org.apache.dubbo.rpc.protocol.tri.transport.TripleClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.retry()', targetType='org.apache.dubbo.common.utils.LRUCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveProperties(MetadataIdentifier, String, boolean, boolean)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.calculateStartTime()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.FOUR_HOURS_IN_MILLISECONDS', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getProtocol(URL)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportMetadata()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.destroy()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveSubscriberData(SubscriberMetadataIdentifier, String)', targetType='org.apache.dubbo.metadata.definition.model.FullServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.shouldReportDefinition()', targetType='org.apache.dubbo.metadata.definition.model.FullServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.saveSubscribedData(SubscriberMetadataIdentifier, Set<String>)', targetType='org.apache.dubbo.metadata.definition.model.FullServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.metadata.definition.model.FullServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doGetSubscribedURLs(SubscriberMetadataIdentifier)', targetType='org.apache.dubbo.metadata.definition.model.FullServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.setUrl(URL)', targetType='org.apache.dubbo.qos.command.impl.OfflineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.loadProperties()', targetType='org.apache.dubbo.qos.command.impl.OfflineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.getUrl()', targetType='org.apache.dubbo.qos.command.impl.OfflineApp'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.doSaveProperties(long)', targetType='org.apache.dubbo.qos.command.impl.OfflineApp'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.report.support.AbstractMetadataReport.reportURL', targetTypeName='org.apache.dubbo.qos.command.impl.OfflineApp'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.remoting.http.jetty.JettyHttpBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createMetadataReportBuilder(String)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.common.utils.Log'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.takeoverMode', targetTypeName='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DoubleRangeMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.start()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='com.alibaba.dubbo.config.RegistryConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerStartupProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerStartupProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.probe.impl.DeployerStartupProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerStartupProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createReferenceBuilder(String)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createReferenceConfig(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(String, Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MappingChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createRegistryBuilder(String)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerBuilder(String)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderBuilder(String)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createServiceBuilder(String)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProtocolBuilder(String)', targetType='org.apache.dubbo.remoting.api.Http2WireProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(String, Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>createServiceConfig(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String, Consumer<ApplicationBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.metadata.MetadataConstants'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.MetadataConstants'"
      } ]
    } ]
  } ]
}