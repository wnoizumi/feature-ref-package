{
  "executionId" : "11f9af8d-3da4-4c66-974c-36928fa6cb8b",
  "computingTime" : 15336,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.216355441081779,
    "meanNumConcerns" : 1.7593615715162678,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "554b4479-fab7-412b-962b-ab90c72ae58b",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784067,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 8.143409501880395,
    "generation" : 0,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5470069841119268,
      "MetricsIntensity" : 0.06086258002784067,
      "Density" : 3.2057692307692305,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "382950f7-759a-4106-ba50-10c834575243",
    "objectives" : {
      "NumberOfConcerns" : 1.0059316120027912,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.545564011004208,
      "MetricsIntensity" : 0.06079878801563755,
      "Density" : 1.0044044044044045
    },
    "euclideanDistance" : 10.11543687629658,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7589993898718732,
      "LackOfCohesion" : 0.545564011004208,
      "MetricsIntensity" : 0.06079878801563755,
      "Density" : 3.2119078104993597,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8e7dda20-4a5e-485f-b80b-28593c643ba4",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5407836230932695,
      "MetricsIntensity" : 0.06107794090149189,
      "Density" : 1.0042042042042043
    },
    "euclideanDistance" : 14.082091516676856,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7599754450583185,
      "LackOfCohesion" : 0.5407836230932695,
      "MetricsIntensity" : 0.0610779409014919,
      "Density" : 3.229877656149388,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    } ]
  }, {
    "solutionId" : "d13b5a8c-5500-4b60-86c5-f56f996bb94e",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5429566794469001,
      "MetricsIntensity" : 0.06085461061188592,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 20.05776949224833,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758094074526573,
      "LackOfCohesion" : 0.5429566794469001,
      "MetricsIntensity" : 0.06085461061188592,
      "Density" : 3.213461538461539,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed3d8f50-7739-43d6-8af8-c9e426fda6df",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.544930800583172,
      "MetricsIntensity" : 0.06100237706225893,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 24.047961699697815,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7565749235474004,
      "LackOfCohesion" : 0.544930800583172,
      "MetricsIntensity" : 0.061002377062258924,
      "Density" : 3.2012820512820523,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd8c86e3-85f7-46c2-9a1f-22fce61d3a05",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5452544730590607,
      "MetricsIntensity" : 0.0608367273422601,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 26.044291000710782,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7561124694376526,
      "LackOfCohesion" : 0.5452544730590607,
      "MetricsIntensity" : 0.0608367273422601,
      "Density" : 3.2006410256410254,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc2122ef-9e1e-40b1-b845-be0f846dd4fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5441219058341725,
      "MetricsIntensity" : 0.06090539966164286,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 26.044338532946114,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756872327428222,
      "LackOfCohesion" : 0.5441219058341725,
      "MetricsIntensity" : 0.06090539966164286,
      "Density" : 3.203205128205129,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "1f81787f-17a2-43c5-8745-fefc8df88278",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5458914099410733,
      "MetricsIntensity" : 0.06089508593111318,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 26.04437937164621,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7580940745265732,
      "LackOfCohesion" : 0.5458914099410733,
      "MetricsIntensity" : 0.06089508593111319,
      "Density" : 3.2012820512820523,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "2f34500d-e984-463c-af23-49a7d3bbb7ce",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5449568143890339,
      "MetricsIntensity" : 0.060965186283057075,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 27.042654920432046,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7561124694376526,
      "LackOfCohesion" : 0.5449568143890339,
      "MetricsIntensity" : 0.060965186283057075,
      "Density" : 3.203335471456062,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "29f40f3e-338e-473d-9542-93201afb50a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5472632051708686,
      "MetricsIntensity" : 0.060955842144996754,
      "Density" : 1.0
    },
    "euclideanDistance" : 27.04273475486617,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7573349633251825,
      "LackOfCohesion" : 0.5472632051708686,
      "MetricsIntensity" : 0.060955842144996754,
      "Density" : 3.2060333761232354,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "511a97c6-ad0b-497e-ba5a-dba78daa80e1",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5446502671671672,
      "MetricsIntensity" : 0.060918159444679466,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 30.0383662120499,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7573349633251831,
      "LackOfCohesion" : 0.5446502671671672,
      "MetricsIntensity" : 0.06091815944467946,
      "Density" : 3.198845413726748,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "213d4f73-3349-43ec-a1f4-db5a79c6afa9",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5449727967763642,
      "MetricsIntensity" : 0.06091112150938284,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 30.038438655607457,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7573349633251825,
      "LackOfCohesion" : 0.5449727967763642,
      "MetricsIntensity" : 0.06091112150938284,
      "Density" : 3.2052597819114816,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "b79c282d-7d4b-4198-b336-20480c7061d7",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5431022287966427,
      "MetricsIntensity" : 0.060864700020296515,
      "Density" : 1.0026026026026027
    },
    "euclideanDistance" : 30.038466455640584,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7588739290085678,
      "LackOfCohesion" : 0.5431022287966427,
      "MetricsIntensity" : 0.060864700020296515,
      "Density" : 3.214377406931964,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "a4e55fb2-447e-4daf-b05f-63016316d7d6",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5462489732468513,
      "MetricsIntensity" : 0.0608626858218801,
      "Density" : 1.0
    },
    "euclideanDistance" : 31.03719837054507,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7577981651376144,
      "LackOfCohesion" : 0.5462489732468513,
      "MetricsIntensity" : 0.06086268582188009,
      "Density" : 3.206033376123235,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "88cba3a3-f4c6-4230-b10e-9ed7b596e21d",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5460726718303638,
      "MetricsIntensity" : 0.06103160210504862,
      "Density" : 1.0028028028028029
    },
    "euclideanDistance" : 31.037252228697955,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75703794369645,
      "LackOfCohesion" : 0.5460726718303638,
      "MetricsIntensity" : 0.06103160210504862,
      "Density" : 3.217084136159281,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3df66fa6-72a9-46a8-82d4-4354e20d6136",
    "objectives" : {
      "NumberOfConcerns" : 1.0038381018841591,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5484462224032385,
      "MetricsIntensity" : 0.06096966594267812,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 31.03738748166466,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758557457212714,
      "LackOfCohesion" : 0.5484462224032385,
      "MetricsIntensity" : 0.06096966594267812,
      "Density" : 3.2155227710070555,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6a3507d4-66a3-459d-ad7e-36fb0c83aa9c",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5437216817988908,
      "MetricsIntensity" : 0.060877039319358325,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 32.036127426940475,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7571865443425077,
      "LackOfCohesion" : 0.5437216817988908,
      "MetricsIntensity" : 0.06087703931935833,
      "Density" : 3.2207958921694475,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e835ac2-c230-4a04-b12e-6eca55ceae38",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.548246099640524,
      "MetricsIntensity" : 0.06100620674420754,
      "Density" : 1.0032032032032032
    },
    "euclideanDistance" : 32.03613903761003,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7559633027522938,
      "LackOfCohesion" : 0.548246099640524,
      "MetricsIntensity" : 0.06100620674420754,
      "Density" : 3.218368657675017,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c487363e-1ffd-48d0-aef0-758306feff4d",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5452293889552806,
      "MetricsIntensity" : 0.061032601604640434,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 33.0348300323448,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5452293889552806,
      "MetricsIntensity" : 0.061032601604640434,
      "Density" : 3.2021822849807453,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f9efce96-5fe1-4f19-854a-76ceacec10d9",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5451591838789964,
      "MetricsIntensity" : 0.06104103006522723,
      "Density" : 0.998998998998999
    },
    "euclideanDistance" : 33.03484551422838,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7558139534883719,
      "LackOfCohesion" : 0.5451591838789964,
      "MetricsIntensity" : 0.06104103006522724,
      "Density" : 3.2007697241821678,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "8893ba7b-6ee1-4151-b3d1-6cdb87fdb210",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5463800164477971,
      "MetricsIntensity" : 0.0609849622966799,
      "Density" : 1.0022022022022021
    },
    "euclideanDistance" : 34.03396613598128,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7565749235474013,
      "LackOfCohesion" : 0.5463800164477971,
      "MetricsIntensity" : 0.0609849622966799,
      "Density" : 3.2130937098844665,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "df194cf1-5267-46ea-9d99-b756e0721cfb",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5444657557659907,
      "MetricsIntensity" : 0.0609975724713665,
      "Density" : 1.0038038038038037
    },
    "euclideanDistance" : 34.03397240944277,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.755963302752294,
      "LackOfCohesion" : 0.5444657557659907,
      "MetricsIntensity" : 0.060997572471366494,
      "Density" : 3.2202954399486203,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6d7cef3d-7ace-441f-a42a-f472b1df87c8",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5441332904033271,
      "MetricsIntensity" : 0.06099277177556916,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 35.03290154698467,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7577981651376144,
      "LackOfCohesion" : 0.5441332904033271,
      "MetricsIntensity" : 0.06099277177556916,
      "Density" : 3.2041078305519894,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac130f93-2e98-49f8-8e70-0ee4047bf606",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.549350666533326,
      "MetricsIntensity" : 0.06104212292308171,
      "Density" : 0.9975975975975976
    },
    "euclideanDistance" : 39.02952096243372,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.549350666533326,
      "MetricsIntensity" : 0.06104212292308171,
      "Density" : 3.1983311938382544,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "1e4df0ac-2863-4b34-aa3a-da0630325bd6",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5437227744571035,
      "MetricsIntensity" : 0.0610318142575732,
      "Density" : 0.9977977977977978
    },
    "euclideanDistance" : 40.028711609016774,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756425948592411,
      "LackOfCohesion" : 0.5437227744571035,
      "MetricsIntensity" : 0.06103181425757321,
      "Density" : 3.2010276172125884,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "24b505a1-c93b-4166-9738-3dbb9f26e25f",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.548155008578041,
      "MetricsIntensity" : 0.061055001359016293,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 40.028803322007455,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7558139534883719,
      "LackOfCohesion" : 0.548155008578041,
      "MetricsIntensity" : 0.061055001359016293,
      "Density" : 3.2020525978191143,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.urls], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl(), org.apache.dubbo.rpc.model.ProviderModel.equals(Object), org.apache.dubbo.rpc.model.ProviderModel.hashCode(), org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance(), org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.utils.Stack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "edcab099-4672-434f-961c-f1be1b3eadc4",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5481219472476991,
      "MetricsIntensity" : 0.06105479526359127,
      "Density" : 1.0028028028028029
    },
    "euclideanDistance" : 41.02818389137159,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.755813953488372,
      "LackOfCohesion" : 0.5481219472476991,
      "MetricsIntensity" : 0.061054795263591276,
      "Density" : 3.2191516709511574,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "b66b5750-e2ba-4dd9-b18b-0b86ba6f936b",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5445410042419443,
      "MetricsIntensity" : 0.06111526711412078,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 42.02737148130337,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756889161053276,
      "LackOfCohesion" : 0.5445410042419443,
      "MetricsIntensity" : 0.06111526711412079,
      "Density" : 3.2042389210019264,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)]"
      } ]
    } ]
  }, {
    "solutionId" : "98a0b364-0a43-4e9d-93c0-1aa77b423615",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5435856216845338,
      "MetricsIntensity" : 0.06097952614938967,
      "Density" : 1.0024024024024023
    },
    "euclideanDistance" : 44.02618212343087,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7556644213104715,
      "LackOfCohesion" : 0.5435856216845338,
      "MetricsIntensity" : 0.06097952614938967,
      "Density" : 3.2157996146435455,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.qos.textui.TTree'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.qos.textui.TTree'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboRouteDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.monitor.dubbo.DubboMonitor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c17ee665-4c50-494e-a0d2-b0077a34d203",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5472817541240025,
      "MetricsIntensity" : 0.06110522858284046,
      "Density" : 1.0024024024024023
    },
    "euclideanDistance" : 45.025653331229826,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756276791181874,
      "LackOfCohesion" : 0.5472817541240025,
      "MetricsIntensity" : 0.06110522858284046,
      "Density" : 3.215799614643546,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "95a7ff74-7704-471c-8437-57022c250ef7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5465319068914554,
      "MetricsIntensity" : 0.06111466909564799,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 47.02446096924879,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7556644213104715,
      "LackOfCohesion" : 0.5465319068914554,
      "MetricsIntensity" : 0.061114669095647986,
      "Density" : 3.202954399486191,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "5db19e74-a8d0-4684-ab82-df312c16dfd0",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5472031261789545,
      "MetricsIntensity" : 0.06106549650028862,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 47.02449739844192,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7552019583843328,
      "LackOfCohesion" : 0.5472031261789545,
      "MetricsIntensity" : 0.06106549650028862,
      "Density" : 3.2041078305519894,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.RestHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.stub.StubInvocationUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.qos.command.impl.DisableSimpleProfiler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "d5e66aa1-1f74-4fae-9613-4cede1eb0185",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5459576028018148,
      "MetricsIntensity" : 0.06113267135717117,
      "Density" : 1.0024024024024023
    },
    "euclideanDistance" : 48.02401399059583,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7544396815676666,
      "LackOfCohesion" : 0.5459576028018148,
      "MetricsIntensity" : 0.06113267135717117,
      "Density" : 3.2157996146435464,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='com.alibaba.dubbo.rpc.RpcInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.QueryParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.spring.boot.actuate.health.DubboHealthIndicator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.threadpool.MemoryLimiter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.metadata.report.MetadataScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='com.alibaba.dubbo.rpc.protocol.rest.support.ContentType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.context.DubboInfraBeanRegisterPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboMethodArg'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.cluster.support.FailbackCluster'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.protocol.rest.integration.swagger.DubboSwaggerApiListingResource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "d14fe494-0501-43d9-bfcf-442974a66923",
    "objectives" : {
      "NumberOfConcerns" : 0.994417306350314,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5465251655741238,
      "MetricsIntensity" : 0.06131882672969669,
      "Density" : 0.9931931931931932
    },
    "euclideanDistance" : 74.01538859084165,
    "generation" : 0,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7495395948434624,
      "LackOfCohesion" : 0.5465251655741238,
      "MetricsIntensity" : 0.0613188267296967,
      "Density" : 3.1965206185567006,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.url.component.URLPlainParam'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.common.config.CompositeConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.retry.FailedUnsubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocalMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.validation.filter.ValidationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.protocol.grpc.DubboHandlerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties.Config'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.InvocationProfilerUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)', targetType='org.apache.dubbo.common.logger.jcl.JclLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences()', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)', targetType='org.apache.dubbo.config.spring.ConfigCenterBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListBoolMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery.MultiServiceInstancesChangedListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboPropertiesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboPropertiesMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboPropertiesMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.auth.filter.ProviderAuthFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.auth.filter.ProviderAuthFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.common.beans.ScopeBeanException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.multiple.StringToSortedSetConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToSortedSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.registry.support.SkipFailbackWrapperException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      } ]
    } ]
  } ]
}