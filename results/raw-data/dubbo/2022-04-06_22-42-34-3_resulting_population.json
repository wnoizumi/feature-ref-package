{
  "executionId" : "9d1eff1c-6e94-4036-9524-62132881c41e",
  "computingTime" : 4809255,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 46,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "81c97165-1a1b-4793-944d-dede14559686",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5450167911738464,
      "MetricsIntensity" : 0.061003314255456256,
      "Density" : 0.9974108743278232
    },
    "euclideanDistance" : 41.02795138657825,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5450167911738464,
      "MetricsIntensity" : 0.06100331425545625,
      "Density" : 3.2081998718770017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "029f7bce-f1d3-44f6-92b9-519db2af4285",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5456030140579645,
      "MetricsIntensity" : 0.061003314255456256,
      "Density" : 0.9972117108145788
    },
    "euclideanDistance" : 41.02795433688687,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5456030140579645,
      "MetricsIntensity" : 0.06100331425545626,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "9c2e7281-a7b2-425f-878d-fa32191f6796",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5456030140579644,
      "MetricsIntensity" : 0.06100331425545626,
      "Density" : 0.9972117108145788
    },
    "euclideanDistance" : 41.02795433688687,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5456030140579644,
      "MetricsIntensity" : 0.06100331425545626,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "6a9d339c-0be1-40dc-93f0-f037c012de07",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5456030140579644,
      "MetricsIntensity" : 0.0609937313203776,
      "Density" : 0.9978092013543118
    },
    "euclideanDistance" : 41.02797737013271,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5456030140579644,
      "MetricsIntensity" : 0.060993731320377595,
      "Density" : 3.209481101857784
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "722d3ff0-2459-4220-a9c6-78c56afbd420",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5467208469766026,
      "MetricsIntensity" : 0.061013159189223384,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 42.0272329565691,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5467208469766026,
      "MetricsIntensity" : 0.06101315918922338,
      "Density" : 3.1979500320307506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "6ce8691f-ea91-4d9f-9564-306ffcaed744",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5467207749064306,
      "MetricsIntensity" : 0.06104595883316324,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 42.02723300326134,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5467207749064306,
      "MetricsIntensity" : 0.06104595883316325,
      "Density" : 3.197950032030751
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "fc712fae-27ed-40ba-8183-57fb4b5492ff",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5467207749064305,
      "MetricsIntensity" : 0.06104595883316325,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 42.02723300326134,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5467207749064305,
      "MetricsIntensity" : 0.06104595883316326,
      "Density" : 3.1979500320307492
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "7c47b2a7-59f6-4873-88dc-6a6d12ac9056",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5467207749064306,
      "MetricsIntensity" : 0.06104595883316324,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 42.02723300326134,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5467207749064306,
      "MetricsIntensity" : 0.061045958833163244,
      "Density" : 3.1979500320307515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "8f067f36-2d8c-4f1f-a11a-81feed362292",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5460522195220424,
      "MetricsIntensity" : 0.06106021777873212,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.02723375721634,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5460522195220424,
      "MetricsIntensity" : 0.06106021777873213,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "2a35fda0-5bb4-4400-a30c-865a352c5cd8",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5460522195220425,
      "MetricsIntensity" : 0.0610602177787321,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.02723375721634,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5460522195220425,
      "MetricsIntensity" : 0.0610602177787321,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "8967a694-d03d-44f6-9bee-35797aa6ce78",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5461701896920166,
      "MetricsIntensity" : 0.06102634447929154,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.02723524094695,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5461701896920166,
      "MetricsIntensity" : 0.06102634447929153,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "7c0af7de-aa05-46b0-88e0-3762c4676cae",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5456175638040537,
      "MetricsIntensity" : 0.06105729156422819,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.02723642595674,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5456175638040537,
      "MetricsIntensity" : 0.06105729156422819,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "fdf18ee5-2149-4627-a41e-f9ac54975b29",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5456266957888719,
      "MetricsIntensity" : 0.061020012281837975,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.02723649037058,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038012,
      "LackOfCohesion" : 0.5456266957888719,
      "MetricsIntensity" : 0.061020012281837975,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "d5439067-cbfd-4dc0-931d-ef7cd28ea62c",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5460783984515234,
      "MetricsIntensity" : 0.06102293849634189,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 42.02723875712114,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5460783984515234,
      "MetricsIntensity" : 0.06102293849634189,
      "Density" : 3.1998718770019203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "e7dca0de-34c7-450c-a08f-77ea83f26f09",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5456183596456027,
      "MetricsIntensity" : 0.0610240532785579,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 42.02724110191703,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038012,
      "LackOfCohesion" : 0.5456183596456027,
      "MetricsIntensity" : 0.061024053278557894,
      "Density" : 3.1998718770019208
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "3f7557ba-6dc4-49e4-a51d-e6aaf4ef8d32",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5471411878473763,
      "MetricsIntensity" : 0.06101272054749295,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 42.02724313815006,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5471411878473763,
      "MetricsIntensity" : 0.06101272054749295,
      "Density" : 3.1985906470211396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "0eaf6bbb-9c53-4ee5-b596-44d32f7ff44a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5466743344393464,
      "MetricsIntensity" : 0.06101335556126323,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 42.027245381973124,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5466743344393464,
      "MetricsIntensity" : 0.06101335556126322,
      "Density" : 3.1985906470211396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "0ac88e4f-2b33-4618-9067-5b0675c6d448",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5466743344393465,
      "MetricsIntensity" : 0.06101335556126321,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 42.027245381973124,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5466743344393465,
      "MetricsIntensity" : 0.06101335556126321,
      "Density" : 3.1985906470211396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "dd4d31e3-b326-4e6a-913e-19a72727e438",
    "objectives" : {
      "NumberOfConcerns" : 0.9992999649982499,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5454478901989728,
      "MetricsIntensity" : 0.06102405327855789,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 42.027247210204536,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7504598405885958,
      "LackOfCohesion" : 0.5454478901989728,
      "MetricsIntensity" : 0.06102405327855789,
      "Density" : 3.1998718770019217
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "29632262-a8fe-4a34-9da3-a7f32696bf94",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5466789533863221,
      "MetricsIntensity" : 0.061002502598643996,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 42.0272501392594,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038008,
      "LackOfCohesion" : 0.5466789533863221,
      "MetricsIntensity" : 0.061002502598643996,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "ba7f841c-3ec7-4c01-9b97-9fb2874f4f12",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5454163261219361,
      "MetricsIntensity" : 0.060993594643237226,
      "Density" : 0.9970125473013344
    },
    "euclideanDistance" : 42.02728203235433,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190067,
      "LackOfCohesion" : 0.5454163261219361,
      "MetricsIntensity" : 0.060993594643237226,
      "Density" : 3.2069186418962197
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "b2fe60a9-dc07-4bb7-9396-8a37277e5350",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5454597148385556,
      "MetricsIntensity" : 0.06098510855012539,
      "Density" : 0.9972117108145788
    },
    "euclideanDistance" : 42.027295626506444,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038012,
      "LackOfCohesion" : 0.5454597148385556,
      "MetricsIntensity" : 0.060985108550125386,
      "Density" : 3.2055057618437908
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "45d5f285-c3b7-45c8-8a33-3afdd501b2eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5454103297553852,
      "MetricsIntensity" : 0.06099486467077776,
      "Density" : 0.9974108743278232
    },
    "euclideanDistance" : 42.02729972590617,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038008,
      "LackOfCohesion" : 0.5454103297553852,
      "MetricsIntensity" : 0.060994864670777776,
      "Density" : 3.208199871877002
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "0642d0b4-d067-40c2-9d3a-42c3ce1c1421",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5455172542456114,
      "MetricsIntensity" : 0.06102697949306179,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 43.026589373648704,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5455172542456114,
      "MetricsIntensity" : 0.061026979493061795,
      "Density" : 3.1985906470211396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "ebcee62c-2725-443d-aa20-a7467b54e521",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5456854757434946,
      "MetricsIntensity" : 0.061026344479291526,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 43.02659150589123,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5456854757434946,
      "MetricsIntensity" : 0.06102634447929152,
      "Density" : 3.1985906470211396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "4217dd2f-f746-4c58-a1f1-66c807951fdc",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5455313039252787,
      "MetricsIntensity" : 0.06102634447929152,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 43.02659875879187,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5455313039252787,
      "MetricsIntensity" : 0.06102634447929153,
      "Density" : 3.1998718770019217
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "533c2fe9-636a-49ac-a8df-7f7ce34352ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5466564738988542,
      "MetricsIntensity" : 0.061012085533722664,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 43.026599208752856,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5466564738988542,
      "MetricsIntensity" : 0.061012085533722664,
      "Density" : 3.1979500320307492
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "9def1c81-8390-4343-bb43-0723fd3b799f",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5466564738988543,
      "MetricsIntensity" : 0.06101208553372266,
      "Density" : 0.9942242581159132
    },
    "euclideanDistance" : 43.026599208752856,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5466564738988543,
      "MetricsIntensity" : 0.061012085533722664,
      "Density" : 3.1979500320307492
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "5fedf256-af62-41a7-85e3-640247308468",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5457364292484213,
      "MetricsIntensity" : 0.06102293849634189,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 43.026601355219995,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5457364292484213,
      "MetricsIntensity" : 0.06102293849634189,
      "Density" : 3.19987187700192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "5e63aaa7-1a1a-49fe-bfa9-4dc48874f855",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5455532627964774,
      "MetricsIntensity" : 0.06102341826478762,
      "Density" : 0.9946225851424019
    },
    "euclideanDistance" : 43.02660255359009,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5455532627964774,
      "MetricsIntensity" : 0.06102341826478762,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "5f68b6a5-3a30-4812-bc65-9f4956f7be05",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5456042163014042,
      "MetricsIntensity" : 0.06102001228183796,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 43.02660779926705,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038008,
      "LackOfCohesion" : 0.5456042163014042,
      "MetricsIntensity" : 0.06102001228183797,
      "Density" : 3.1998718770019203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "832ac140-3f23-469d-90ab-3a0027ea5753",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5455852546952012,
      "MetricsIntensity" : 0.06100644146028199,
      "Density" : 0.9950209121688907
    },
    "euclideanDistance" : 43.02661214491909,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7498467198038008,
      "LackOfCohesion" : 0.5455852546952012,
      "MetricsIntensity" : 0.06100644146028198,
      "Density" : 3.198463508322663
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "e505a236-1227-4cda-a1ed-bbfd32d9face",
    "objectives" : {
      "NumberOfConcerns" : 0.9982499124956248,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5439425973700105,
      "MetricsIntensity" : 0.060998905667497695,
      "Density" : 0.9972117108145788
    },
    "euclideanDistance" : 43.02662580890709,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748620478234212,
      "LackOfCohesion" : 0.5439425973700105,
      "MetricsIntensity" : 0.060998905667497695,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "c77b5517-bf23-4026-b76a-d2b94a5b8be7",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.545437235351088,
      "MetricsIntensity" : 0.06098510855012541,
      "Density" : 0.9974108743278232
    },
    "euclideanDistance" : 43.02666557393223,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.545437235351088,
      "MetricsIntensity" : 0.06098510855012541,
      "Density" : 3.206145966709346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "721e181e-98db-41dc-b41a-e2e76bf52add",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.545503204565944,
      "MetricsIntensity" : 0.06102634447929152,
      "Density" : 0.9944234216291575
    },
    "euclideanDistance" : 44.02598525555772,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.545503204565944,
      "MetricsIntensity" : 0.061026344479291526,
      "Density" : 3.19859064702114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      } ]
    } ]
  }, {
    "solutionId" : "4b928bcc-500b-48e0-937b-a5d1cfcb1853",
    "objectives" : {
      "NumberOfConcerns" : 0.9985999299964998,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5455712050155338,
      "MetricsIntensity" : 0.0610229384963419,
      "Density" : 0.9948217486556463
    },
    "euclideanDistance" : 44.0259950923378,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5455712050155338,
      "MetricsIntensity" : 0.06102293849634189,
      "Density" : 3.1998718770019217
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "4cf451d7-14f3-4236-a9be-ae2c2ee7b543",
    "objectives" : {
      "NumberOfConcerns" : 0.9989499474973749,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5453742597281086,
      "MetricsIntensity" : 0.06101612653044258,
      "Density" : 0.9950209121688907
    },
    "euclideanDistance" : 45.025427523390924,
    "generation" : 1,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5453742597281086,
      "MetricsIntensity" : 0.06101612653044258,
      "Density" : 3.200512491992312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.common.utils.LFUCache.CacheDeque'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer.SimpleServletConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.config.spring.context.DubboConfigApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.cache.support.lfu.LfuCache'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock', targetTypeName='org.apache.dubbo.metadata.RevisionResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.rpc.protocol.rest.RestProtocol.ConnectionMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "18174cd0-a571-430b-a24c-6cba0a2046d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 98.0,
      "LackOfCohesion" : 0.5510858222636108,
      "MetricsIntensity" : 0.06025732546014025,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 98.011737777651,
    "generation" : 1,
    "numberOfRefactorings" : 98,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748007357449418,
      "LackOfCohesion" : 0.5510858222636108,
      "MetricsIntensity" : 0.06025732546014026,
      "Density" : 3.212684176809737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.server.handler.LocalHostPermitHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "273588d6-32e9-4964-ba68-f1f484f5a424",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 99.0,
      "LackOfCohesion" : 0.549216085661202,
      "MetricsIntensity" : 0.060224864925561915,
      "Density" : 0.9992033459470225
    },
    "euclideanDistance" : 99.01161283844479,
    "generation" : 1,
    "numberOfRefactorings" : 99,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7480073574494177,
      "LackOfCohesion" : 0.549216085661202,
      "MetricsIntensity" : 0.060224864925561915,
      "Density" : 3.213965406790518
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "665b6706-2793-4728-a926-7eedd8665519",
    "objectives" : {
      "NumberOfConcerns" : 0.9978998949947497,
      "NumberOfRefactorings" : 99.0,
      "LackOfCohesion" : 0.5506494935855619,
      "MetricsIntensity" : 0.06022080625889363,
      "Density" : 0.9988050189205337
    },
    "euclideanDistance" : 99.01161677841921,
    "generation" : 1,
    "numberOfRefactorings" : 99,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7480073574494177,
      "LackOfCohesion" : 0.5506494935855619,
      "MetricsIntensity" : 0.060220806258893624,
      "Density" : 3.212684176809737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "d951fcdb-2168-4d45-a7af-4a34c7e1c5d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9971998599929996,
      "NumberOfRefactorings" : 100.0,
      "LackOfCohesion" : 0.5510286101453707,
      "MetricsIntensity" : 0.06028529787592953,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 100.01149377977295,
    "generation" : 1,
    "numberOfRefactorings" : 100,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7467811158798285,
      "LackOfCohesion" : 0.5510286101453707,
      "MetricsIntensity" : 0.06028529787592953,
      "Density" : 3.212043561819347
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.server.handler.LocalHostPermitHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reconnect()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "0a57d4e7-9dc7-4901-bade-4fe00a89ee9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 100.0,
      "LackOfCohesion" : 0.5507346132822598,
      "MetricsIntensity" : 0.06022409151135455,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 100.01149959214727,
    "generation" : 1,
    "numberOfRefactorings" : 100,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7473942366646236,
      "LackOfCohesion" : 0.5507346132822598,
      "MetricsIntensity" : 0.06022409151135455,
      "Density" : 3.2133247918001278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.isConnected()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "ea1902f4-b70a-428a-888e-eded44b1c997",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 102.0,
      "LackOfCohesion" : 0.5506592849902716,
      "MetricsIntensity" : 0.060252762135306684,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 102.0112737453959,
    "generation" : 1,
    "numberOfRefactorings" : 102,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7473942366646233,
      "LackOfCohesion" : 0.5506592849902716,
      "MetricsIntensity" : 0.06025276213530669,
      "Density" : 3.2133247918001278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.CuratorWatcherImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "219c598e-1e34-47fd-9804-f86fa2f1c34a",
    "objectives" : {
      "NumberOfConcerns" : 0.9968498424921246,
      "NumberOfRefactorings" : 102.0,
      "LackOfCohesion" : 0.5507708607791743,
      "MetricsIntensity" : 0.060261838549241324,
      "Density" : 1.0
    },
    "euclideanDistance" : 102.01127726697057,
    "generation" : 1,
    "numberOfRefactorings" : 102,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7461679950950337,
      "LackOfCohesion" : 0.5507708607791743,
      "MetricsIntensity" : 0.060261838549241324,
      "Density" : 3.2165278667520822
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.CuratorWatcherImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.initReferenceBean(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "83a4afee-0f3f-4949-9217-7b2199b4335e",
    "objectives" : {
      "NumberOfConcerns" : 0.9968498424921246,
      "NumberOfRefactorings" : 103.0,
      "LackOfCohesion" : 0.5510463016292553,
      "MetricsIntensity" : 0.060249004970499224,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 103.0111538014211,
    "generation" : 1,
    "numberOfRefactorings" : 103,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7461679950950335,
      "LackOfCohesion" : 0.5510463016292553,
      "MetricsIntensity" : 0.06024900497049923,
      "Density" : 3.2114029468289567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.qos.server.handler.LocalHostPermitHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.CuratorWatcherImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.common.extension.support.MultiInstanceActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.monitor.dubbo.DubboMonitorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      } ]
    } ]
  }, {
    "solutionId" : "840d6487-0e71-4b57-8b5a-a5d0bdfdfc93",
    "objectives" : {
      "NumberOfConcerns" : 0.9975498774938747,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5499702643112929,
      "MetricsIntensity" : 0.06026427065543484,
      "Density" : 0.9990041824337781
    },
    "euclideanDistance" : 107.01074345218126,
    "generation" : 1,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7473942366646231,
      "LackOfCohesion" : 0.5499702643112929,
      "MetricsIntensity" : 0.06026427065543484,
      "Density" : 3.213324791800128
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.client.AbstractServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.common.utils.ConcurrentHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.compiler.support.JdkCompiler.JavaFileManagerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHelper.DubboLoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.common.deploy.AbstractDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.common.utils.ServiceAnnotationResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.monitor.MonitorFactory$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.context.ConfigConfigurationAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.registry.RegistryScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.CuratorWatcherImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.remoting.exchange.Response'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.config.bootstrap.builders.MetadataReportBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.cluster.support.FailoverCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.rpc.protocol.rest.DubboHttpProtocolServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.spring.reference.ReferenceCreator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.registry.retry.FailedSubscribedTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.ServiceStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.ArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.metadata.definition.model.ServiceDefinition'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.springmvc.AbstractRequestAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation'"
      } ]
    } ]
  } ]
}